[{"data":1,"prerenderedAt":403},["ShallowReactive",2],{"navigation":3,"/blog/zig-testing":50,"/blog/zig-testing-surround":400},[4],{"title":5,"path":6,"stem":7,"children":8,"page":49},"Blog","/blog","blog",[9,13,17,21,25,29,33,37,41,45],{"title":10,"path":11,"stem":12},"Third post","/blog/_lorem-ipsum","blog/_lorem-ipsum",{"title":14,"path":15,"stem":16},"Markdown Style Guide","/blog/_markdown-style-guide","blog/_markdown-style-guide",{"title":18,"path":19,"stem":20},"Remote Debugging Addon for Blender","/blog/blender-debugger","blog/blender-debugger",{"title":22,"path":23,"stem":24},"How to use Dynamic Variables with Tailwind","/blog/dynamic-tailwind","blog/dynamic-tailwind",{"title":26,"path":27,"stem":28},"Krita Popup Palette Improvements","/blog/krita-brush-pr","blog/krita-brush-pr",{"title":30,"path":31,"stem":32},"How to map Mod+Number keys in Vim/Neovim (using Wezterm)","/blog/neovim-wezterm-mod-number-keys","blog/neovim-wezterm-mod-number-keys",{"title":34,"path":35,"stem":36},"Abusing Typescript's New `satisfies` Operator","/blog/satisfies","blog/satisfies",{"title":38,"path":39,"stem":40},"How to Publish v0.x.x Versioned Packages with Semantic Release","/blog/semantic-release-v0","blog/semantic-release-v0",{"title":42,"path":43,"stem":44},"I cave, Tailwind rocks.","/blog/tailwind-rocks","blog/tailwind-rocks",{"title":46,"path":47,"stem":48},"How To Add Tests To A Zig Project","/blog/zig-testing","blog/zig-testing",false,{"id":51,"title":46,"body":52,"date":391,"description":97,"extension":392,"image":393,"langs":394,"meta":395,"navigation":205,"path":47,"published":205,"seo":396,"stem":48,"tags":397,"__hash__":399},"blog/blog/zig-testing.md",{"type":53,"value":54,"toc":387},"minimark",[55,67,79,85,88,98,101,106,116,123,156,160,163,272,280,289,377,383],[56,57,58,59,66],"p",{},"I have been dabbling with ",[60,61,65],"a",{"href":62,"rel":63},"https://ziglang.org/",[64],"nofollow","Zig"," lately, and I wanted to add some tests to my tiny project, but this was a bit harder than I thought and the docs on this are sparse. so I thought I'd properly document it.",[56,68,69,70,74,75,78],{},"First, you probably want ",[71,72,73],"code",{},"zig build test"," where test is the build step. Not ",[71,76,77],{},"zig test",".",[56,80,81,82,84],{},"Still, even if you have a test step and you ran ",[71,83,73],{},", you might have been puzzled that no tests were running.",[56,86,87],{},"And if you were using dependencies, you might have gotten an error like this:",[89,90,95],"pre",{"className":91,"code":93,"language":94},[92],"language-text","no module named '...' available within module root\n","text",[71,96,93],{"__ignoreMap":97},"",[56,99,100],{},"Several things are going on here.",[102,103,105],"h2",{"id":104},"adding-all-tests","Adding ALL Tests",[56,107,108,109,111,112,115],{},"If you run ",[71,110,73],{}," it will only run tests in the given ",[71,113,114],{},"root_source_file",", so if you have no tests in main, they won't run.",[56,117,118,119,122],{},"You can get around this with the following magical incantation in ",[71,120,121],{},"src/main.zig",":",[89,124,128],{"className":125,"code":126,"language":127,"meta":97,"style":97},"language-zig shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","test {\n    // include all tests in imported modules, recursively\n    @import(\"std\").testing.refAllDeclsRecursive(@This());\n}\n","zig",[71,129,130,138,144,150],{"__ignoreMap":97},[131,132,135],"span",{"class":133,"line":134},"line",1,[131,136,137],{},"test {\n",[131,139,141],{"class":133,"line":140},2,[131,142,143],{},"    // include all tests in imported modules, recursively\n",[131,145,147],{"class":133,"line":146},3,[131,148,149],{},"    @import(\"std\").testing.refAllDeclsRecursive(@This());\n",[131,151,153],{"class":133,"line":152},4,[131,154,155],{},"}\n",[102,157,159],{"id":158},"sharing-modules-with-the-build-step","Sharing Modules with the Build Step",[56,161,162],{},"The other error is because when you do this:",[89,164,166],{"className":125,"code":165,"language":127,"meta":97,"style":97},"const exe = b.addExecutable(.{\n    .name = \"foot\",\n    .root_source_file = b.path(\"src/main.zig\"),\n    .target = target,\n    .optimize = optimize,\n});\n\nexe.root_module.addImport(...); \n\n// ... \n\nconst tests = b.addTest(.{\n    .root_source_file = b.path(\"src/main.zig\"),\n    .target = target,\n    .optimize = optimize,\n});\n\nconst test_step = b.step(\"test\", \"Run tests.\");\ntest_step.dependOn(&b.addRunArtifact(tests).step);\n",[71,167,168,173,178,183,188,194,200,207,213,218,224,229,235,240,245,250,255,260,266],{"__ignoreMap":97},[131,169,170],{"class":133,"line":134},[131,171,172],{},"const exe = b.addExecutable(.{\n",[131,174,175],{"class":133,"line":140},[131,176,177],{},"    .name = \"foot\",\n",[131,179,180],{"class":133,"line":146},[131,181,182],{},"    .root_source_file = b.path(\"src/main.zig\"),\n",[131,184,185],{"class":133,"line":152},[131,186,187],{},"    .target = target,\n",[131,189,191],{"class":133,"line":190},5,[131,192,193],{},"    .optimize = optimize,\n",[131,195,197],{"class":133,"line":196},6,[131,198,199],{},"});\n",[131,201,203],{"class":133,"line":202},7,[131,204,206],{"emptyLinePlaceholder":205},true,"\n",[131,208,210],{"class":133,"line":209},8,[131,211,212],{},"exe.root_module.addImport(...); \n",[131,214,216],{"class":133,"line":215},9,[131,217,206],{"emptyLinePlaceholder":205},[131,219,221],{"class":133,"line":220},10,[131,222,223],{},"// ... \n",[131,225,227],{"class":133,"line":226},11,[131,228,206],{"emptyLinePlaceholder":205},[131,230,232],{"class":133,"line":231},12,[131,233,234],{},"const tests = b.addTest(.{\n",[131,236,238],{"class":133,"line":237},13,[131,239,182],{},[131,241,243],{"class":133,"line":242},14,[131,244,187],{},[131,246,248],{"class":133,"line":247},15,[131,249,193],{},[131,251,253],{"class":133,"line":252},16,[131,254,199],{},[131,256,258],{"class":133,"line":257},17,[131,259,206],{"emptyLinePlaceholder":205},[131,261,263],{"class":133,"line":262},18,[131,264,265],{},"const test_step = b.step(\"test\", \"Run tests.\");\n",[131,267,269],{"class":133,"line":268},19,[131,270,271],{},"test_step.dependOn(&b.addRunArtifact(tests).step);\n",[56,273,274,277,278,78],{},[71,275,276],{},"tests.root_module"," has no imports added, so it can't find them. You would have to also add them all to ",[71,279,276],{},[56,281,282,283,288],{},"The good news is zig 0.14.0 added the following feature to avoid this duplication, see ",[60,284,287],{"href":285,"rel":286},"https://github.com/ziglang/zig/pull/20388",[64],"#20388",". Now you can create a module and pass it both to the exe and to tests:",[89,290,292],{"className":125,"code":291,"language":127,"meta":97,"style":97},"const main_module = b.createModule(.{\n    .root_source_file = b.path(\"src/main.zig\"),\n    .target = target,\n    .optimize = optimize,\n});\n\nconst exe = b.addExecutable(.{\n    .name = \"foot\",\n    .root_module = main_module,\n});\n\nexe.root_module.addImport(...); \n\n// ... \nconst tests = b.addTest(.{\n    .root_module = main_module,\n});\n\nconst test_step = b.step(\"test\", \"Run tests.\");\ntest_step.dependOn(&b.addRunArtifact(tests).step);\n",[71,293,294,299,303,307,311,315,319,323,327,332,336,340,344,348,352,356,360,364,368,372],{"__ignoreMap":97},[131,295,296],{"class":133,"line":134},[131,297,298],{},"const main_module = b.createModule(.{\n",[131,300,301],{"class":133,"line":140},[131,302,182],{},[131,304,305],{"class":133,"line":146},[131,306,187],{},[131,308,309],{"class":133,"line":152},[131,310,193],{},[131,312,313],{"class":133,"line":190},[131,314,199],{},[131,316,317],{"class":133,"line":196},[131,318,206],{"emptyLinePlaceholder":205},[131,320,321],{"class":133,"line":202},[131,322,172],{},[131,324,325],{"class":133,"line":209},[131,326,177],{},[131,328,329],{"class":133,"line":215},[131,330,331],{},"    .root_module = main_module,\n",[131,333,334],{"class":133,"line":220},[131,335,199],{},[131,337,338],{"class":133,"line":226},[131,339,206],{"emptyLinePlaceholder":205},[131,341,342],{"class":133,"line":231},[131,343,212],{},[131,345,346],{"class":133,"line":237},[131,347,206],{"emptyLinePlaceholder":205},[131,349,350],{"class":133,"line":242},[131,351,223],{},[131,353,354],{"class":133,"line":247},[131,355,234],{},[131,357,358],{"class":133,"line":252},[131,359,331],{},[131,361,362],{"class":133,"line":257},[131,363,199],{},[131,365,366],{"class":133,"line":262},[131,367,206],{"emptyLinePlaceholder":205},[131,369,370],{"class":133,"line":268},[131,371,265],{},[131,373,375],{"class":133,"line":374},20,[131,376,271],{},[56,378,379,380,382],{},"Now ",[71,381,73],{}," should run all tests and give no missing module errors.",[384,385,386],"style",{},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":97,"searchDepth":140,"depth":140,"links":388},[389,390],{"id":104,"depth":140,"text":105},{"id":158,"depth":140,"text":159},"2025-02-15T00:00:00.000Z","md",null,[127],{},{"title":46,"description":97},[398],"testing","mPBr_ZQT7LTfWOHL418BMIkccbtiI3F9cZevoNLmc2o",[401,393],{"title":42,"path":43,"stem":44,"description":402,"children":-1},"CSS in HTML? Class soup? Relearning CSS property names? No thanks, right? or maybe I was wrong...",1758977026982]