[{"data":1,"prerenderedAt":863},["ShallowReactive",2],{"navigation":3,"/blog/satisfies":50,"/blog/satisfies-surround":858},[4],{"title":5,"path":6,"stem":7,"children":8,"page":49},"Blog","/blog","blog",[9,13,17,21,25,29,33,37,41,45],{"title":10,"path":11,"stem":12},"Third post","/blog/_lorem-ipsum","blog/_lorem-ipsum",{"title":14,"path":15,"stem":16},"Markdown Style Guide","/blog/_markdown-style-guide","blog/_markdown-style-guide",{"title":18,"path":19,"stem":20},"Remote Debugging Addon for Blender","/blog/blender-debugger","blog/blender-debugger",{"title":22,"path":23,"stem":24},"How to use Dynamic Variables with Tailwind","/blog/dynamic-tailwind","blog/dynamic-tailwind",{"title":26,"path":27,"stem":28},"Krita Popup Palette Improvements","/blog/krita-brush-pr","blog/krita-brush-pr",{"title":30,"path":31,"stem":32},"How to map Mod+Number keys in Vim/Neovim (using Wezterm)","/blog/neovim-wezterm-mod-number-keys","blog/neovim-wezterm-mod-number-keys",{"title":34,"path":35,"stem":36},"Abusing Typescript's New `satisfies` Operator","/blog/satisfies","blog/satisfies",{"title":38,"path":39,"stem":40},"How to Publish v0.x.x Versioned Packages with Semantic Release","/blog/semantic-release-v0","blog/semantic-release-v0",{"title":42,"path":43,"stem":44},"I cave, Tailwind rocks.","/blog/tailwind-rocks","blog/tailwind-rocks",{"title":46,"path":47,"stem":48},"How To Add Tests To A Zig Project","/blog/zig-testing","blog/zig-testing",false,{"id":51,"title":34,"body":52,"date":847,"description":848,"extension":849,"image":850,"langs":851,"meta":853,"navigation":137,"path":35,"published":137,"seo":854,"stem":36,"tags":855,"__hash__":857},"blog/blog/satisfies.md",{"type":53,"value":54,"toc":845},"minimark",[55,72,75,78,81,527,533,539,611,617,625,703,726,738,824,827,835,838,841],[56,57,58,59,63,64,71],"p",{},"Typescript's new ",[60,61,62],"code",{},"satisfies"," is great for it's ",[65,66,70],"a",{"href":67,"rel":68},"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html#the-satisfies-operator",[69],"nofollow","intended use case",", but it's also great for the following use case.",[56,73,74],{},"Writing libraries I often run into the following problem:",[56,76,77],{},"I want the user to have nice types when using a method, especially in a class, but this often requires complicated types and conditional returns which cannot be handled nicely internally.",[56,79,80],{},"Here's a very simple contrived example:",[82,83,88],"pre",{"className":84,"code":85,"language":86,"meta":87,"style":87},"language-ts shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","type MyType\u003CT> = {value: T}\n\nclass MyClass \u003CT extends MyType\u003Cany>, TCondition extends boolean = false> {\n    public entries: T[] = []\n    public condition: TCondition =false as TCondition\n    constructor(condition:TCondition, entries: T[]) {\n\n    }\n    /** Returns different depending on how the class is instantiated.*/\n    createEntry\u003CTEntry extends MyType\u003Cany>>(val: TEntry): TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>  {\n        // we get the following error for both returns:\n        // Type '{ value: false; }' is not assignable to type 'TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>'.\n        if (this.condition) {\n                return {value: true}\n        } else {\n                return {value: false}\n        }\n    }\n}\n\nconst myClass = new MyClass(true, [])\n\n// res = {value: true}\nconst res = myClass.createEntry({value: \"some val\"})\n","ts","",[60,89,90,132,139,184,207,232,267,272,278,285,351,357,363,383,399,410,425,431,436,441,446,472,477,483],{"__ignoreMap":87},[91,92,95,99,103,107,110,113,116,119,123,126,129],"span",{"class":93,"line":94},"line",1,[91,96,98],{"class":97},"spNyl","type",[91,100,102],{"class":101},"sBMFI"," MyType",[91,104,106],{"class":105},"sMK4o","\u003C",[91,108,109],{"class":101},"T",[91,111,112],{"class":105},">",[91,114,115],{"class":105}," =",[91,117,118],{"class":105}," {",[91,120,122],{"class":121},"swJcz","value",[91,124,125],{"class":105},":",[91,127,128],{"class":101}," T",[91,130,131],{"class":105},"}\n",[91,133,135],{"class":93,"line":134},2,[91,136,138],{"emptyLinePlaceholder":137},true,"\n",[91,140,142,145,148,151,153,156,158,160,163,166,169,171,174,176,179,181],{"class":93,"line":141},3,[91,143,144],{"class":97},"class",[91,146,147],{"class":101}," MyClass",[91,149,150],{"class":105}," \u003C",[91,152,109],{"class":101},[91,154,155],{"class":97}," extends",[91,157,102],{"class":101},[91,159,106],{"class":105},[91,161,162],{"class":101},"any",[91,164,165],{"class":105},">,",[91,167,168],{"class":101}," TCondition",[91,170,155],{"class":97},[91,172,173],{"class":101}," boolean",[91,175,115],{"class":105},[91,177,178],{"class":101}," false",[91,180,112],{"class":105},[91,182,183],{"class":105}," {\n",[91,185,187,190,193,195,197,201,204],{"class":93,"line":186},4,[91,188,189],{"class":97},"    public",[91,191,192],{"class":121}," entries",[91,194,125],{"class":105},[91,196,128],{"class":101},[91,198,200],{"class":199},"sTEyZ","[] ",[91,202,203],{"class":105},"=",[91,205,206],{"class":199}," []\n",[91,208,210,212,215,217,219,221,225,229],{"class":93,"line":209},5,[91,211,189],{"class":97},[91,213,214],{"class":121}," condition",[91,216,125],{"class":105},[91,218,168],{"class":101},[91,220,115],{"class":105},[91,222,224],{"class":223},"sfNiH","false",[91,226,228],{"class":227},"s7zQu"," as",[91,230,231],{"class":101}," TCondition\n",[91,233,235,238,241,245,247,250,253,255,257,259,262,265],{"class":93,"line":234},6,[91,236,237],{"class":97},"    constructor",[91,239,240],{"class":105},"(",[91,242,244],{"class":243},"sHdIc","condition",[91,246,125],{"class":105},[91,248,249],{"class":101},"TCondition",[91,251,252],{"class":105},",",[91,254,192],{"class":243},[91,256,125],{"class":105},[91,258,128],{"class":101},[91,260,261],{"class":199},"[]",[91,263,264],{"class":105},")",[91,266,183],{"class":105},[91,268,270],{"class":93,"line":269},7,[91,271,138],{"emptyLinePlaceholder":137},[91,273,275],{"class":93,"line":274},8,[91,276,277],{"class":105},"    }\n",[91,279,281],{"class":93,"line":280},9,[91,282,284],{"class":283},"sHwdD","    /** Returns different depending on how the class is instantiated.*/\n",[91,286,288,291,293,296,298,300,302,304,307,310,312,315,318,320,322,325,328,330,332,335,337,340,342,344,346,348],{"class":93,"line":287},10,[91,289,290],{"class":121},"    createEntry",[91,292,106],{"class":105},[91,294,295],{"class":101},"TEntry",[91,297,155],{"class":97},[91,299,102],{"class":101},[91,301,106],{"class":105},[91,303,162],{"class":101},[91,305,306],{"class":105},">>(",[91,308,309],{"class":243},"val",[91,311,125],{"class":105},[91,313,314],{"class":101}," TEntry",[91,316,317],{"class":105},"):",[91,319,168],{"class":101},[91,321,155],{"class":97},[91,323,324],{"class":101}," true",[91,326,327],{"class":105}," ?",[91,329,102],{"class":101},[91,331,106],{"class":105},[91,333,334],{"class":101},"true",[91,336,112],{"class":105},[91,338,339],{"class":105}," :",[91,341,102],{"class":101},[91,343,106],{"class":105},[91,345,224],{"class":101},[91,347,112],{"class":105},[91,349,350],{"class":105},"  {\n",[91,352,354],{"class":93,"line":353},11,[91,355,356],{"class":283},"        // we get the following error for both returns:\n",[91,358,360],{"class":93,"line":359},12,[91,361,362],{"class":283},"        // Type '{ value: false; }' is not assignable to type 'TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>'.\n",[91,364,366,369,372,375,377,380],{"class":93,"line":365},13,[91,367,368],{"class":227},"        if",[91,370,371],{"class":121}," (",[91,373,374],{"class":105},"this.",[91,376,244],{"class":199},[91,378,379],{"class":121},") ",[91,381,382],{"class":105},"{\n",[91,384,386,389,391,393,395,397],{"class":93,"line":385},14,[91,387,388],{"class":227},"                return",[91,390,118],{"class":105},[91,392,122],{"class":121},[91,394,125],{"class":105},[91,396,324],{"class":223},[91,398,131],{"class":105},[91,400,402,405,408],{"class":93,"line":401},15,[91,403,404],{"class":105},"        }",[91,406,407],{"class":227}," else",[91,409,183],{"class":105},[91,411,413,415,417,419,421,423],{"class":93,"line":412},16,[91,414,388],{"class":227},[91,416,118],{"class":105},[91,418,122],{"class":121},[91,420,125],{"class":105},[91,422,178],{"class":223},[91,424,131],{"class":105},[91,426,428],{"class":93,"line":427},17,[91,429,430],{"class":105},"        }\n",[91,432,434],{"class":93,"line":433},18,[91,435,277],{"class":105},[91,437,439],{"class":93,"line":438},19,[91,440,131],{"class":105},[91,442,444],{"class":93,"line":443},20,[91,445,138],{"emptyLinePlaceholder":137},[91,447,449,452,455,457,460,463,465,467,469],{"class":93,"line":448},21,[91,450,451],{"class":97},"const",[91,453,454],{"class":199}," myClass ",[91,456,203],{"class":105},[91,458,459],{"class":105}," new",[91,461,147],{"class":462},"s2Zo4",[91,464,240],{"class":199},[91,466,334],{"class":223},[91,468,252],{"class":105},[91,470,471],{"class":199}," [])\n",[91,473,475],{"class":93,"line":474},22,[91,476,138],{"emptyLinePlaceholder":137},[91,478,480],{"class":93,"line":479},23,[91,481,482],{"class":283},"// res = {value: true}\n",[91,484,486,488,491,493,496,499,502,504,507,509,511,514,518,521,524],{"class":93,"line":485},24,[91,487,451],{"class":97},[91,489,490],{"class":199}," res ",[91,492,203],{"class":105},[91,494,495],{"class":199}," myClass",[91,497,498],{"class":105},".",[91,500,501],{"class":462},"createEntry",[91,503,240],{"class":199},[91,505,506],{"class":105},"{",[91,508,122],{"class":121},[91,510,125],{"class":105},[91,512,513],{"class":105}," \"",[91,515,517],{"class":516},"sfazB","some val",[91,519,520],{"class":105},"\"",[91,522,523],{"class":105},"}",[91,525,526],{"class":199},")\n",[56,528,529,530,532],{},"For the user, the types are correct, but internally for us as developers they are very hard to work with. They can become a mess of cast types, often even as ",[60,531,162],{}," if there's a lot of conditional generics magic happening. I've found modifying objects or building objects to add to classes expecially painful.",[56,534,535,536,498],{},"In the example you could cast as the return type but this is not safe if the value we're returning could satisfy either type. It's like, but not exactly like, casting ",[60,537,538],{},"as MyType\u003Cboolean>",[82,540,542],{"className":84,"code":541,"language":86,"meta":87,"style":87},"if (this.condition) {\n    // no error\n    return {value: false} as TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>\n}\n",[60,543,544,558,563,607],{"__ignoreMap":87},[91,545,546,549,551,553,556],{"class":93,"line":94},[91,547,548],{"class":227},"if",[91,550,371],{"class":199},[91,552,374],{"class":105},[91,554,555],{"class":199},"condition) ",[91,557,382],{"class":105},[91,559,560],{"class":93,"line":134},[91,561,562],{"class":283},"    // no error\n",[91,564,565,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604],{"class":93,"line":141},[91,566,567],{"class":227},"    return",[91,569,118],{"class":105},[91,571,122],{"class":121},[91,573,125],{"class":105},[91,575,178],{"class":223},[91,577,523],{"class":105},[91,579,228],{"class":227},[91,581,168],{"class":101},[91,583,155],{"class":97},[91,585,324],{"class":101},[91,587,327],{"class":105},[91,589,102],{"class":101},[91,591,106],{"class":105},[91,593,334],{"class":101},[91,595,112],{"class":105},[91,597,339],{"class":105},[91,599,102],{"class":101},[91,601,106],{"class":105},[91,603,224],{"class":101},[91,605,606],{"class":105},">\n",[91,608,609],{"class":93,"line":186},[91,610,131],{"class":105},[56,612,613,614,616],{},"That's where the new ",[60,615,62],{}," operator can come in handy.",[56,618,619,620,624],{},"By itself it won't fix the error. If we do the following, it won't work, the types of the return ",[621,622,623],"em",{},"values"," are already correct.",[82,626,628],{"className":84,"code":627,"language":86,"meta":87,"style":87},"if (this.condition) {\n    return {value: true} satisfies MyType\u003Ctrue>\n} else {\n    return {value: false} satisfies MyType\u003Cfalse>\n}\n",[60,629,630,642,667,675,699],{"__ignoreMap":87},[91,631,632,634,636,638,640],{"class":93,"line":94},[91,633,548],{"class":227},[91,635,371],{"class":199},[91,637,374],{"class":105},[91,639,555],{"class":199},[91,641,382],{"class":105},[91,643,644,646,648,650,652,654,656,659,661,663,665],{"class":93,"line":134},[91,645,567],{"class":227},[91,647,118],{"class":105},[91,649,122],{"class":121},[91,651,125],{"class":105},[91,653,324],{"class":223},[91,655,523],{"class":105},[91,657,658],{"class":227}," satisfies",[91,660,102],{"class":101},[91,662,106],{"class":105},[91,664,334],{"class":101},[91,666,606],{"class":105},[91,668,669,671,673],{"class":93,"line":141},[91,670,523],{"class":105},[91,672,407],{"class":227},[91,674,183],{"class":105},[91,676,677,679,681,683,685,687,689,691,693,695,697],{"class":93,"line":186},[91,678,567],{"class":227},[91,680,118],{"class":105},[91,682,122],{"class":121},[91,684,125],{"class":105},[91,686,178],{"class":223},[91,688,523],{"class":105},[91,690,658],{"class":227},[91,692,102],{"class":101},[91,694,106],{"class":105},[91,696,224],{"class":101},[91,698,606],{"class":105},[91,700,701],{"class":93,"line":209},[91,702,131],{"class":105},[56,704,705,706,709,710,713,714,719,720,725],{},"This is because the real problem is typescript doesn't narrow the type of the ",[621,707,708],{},"return type"," based on ",[60,711,712],{},"this.condition"," (see ",[65,715,718],{"href":716,"rel":717},"https://github.com/microsoft/TypeScript/issues/24929",[69],"#24929"," and ",[65,721,724],{"href":722,"rel":723},"https://github.com/microsoft/TypeScript/issues/33014",[69],"#33014",").",[56,727,728,729,731,732,735,736,125],{},"But we can use ",[60,730,62],{}," to keep the expected type safety ",[621,733,734],{},"while"," casting as ",[60,737,162],{},[82,739,741],{"className":84,"code":740,"language":86,"meta":87,"style":87},"if (this.condition) {\n    return {value: true} satisfies MyType\u003Ctrue> as any\n} else {\n    return {value: false} satisfies MyType\u003Cfalse> as any\n}\n",[60,742,743,755,784,792,820],{"__ignoreMap":87},[91,744,745,747,749,751,753],{"class":93,"line":94},[91,746,548],{"class":227},[91,748,371],{"class":199},[91,750,374],{"class":105},[91,752,555],{"class":199},[91,754,382],{"class":105},[91,756,757,759,761,763,765,767,769,771,773,775,777,779,781],{"class":93,"line":134},[91,758,567],{"class":227},[91,760,118],{"class":105},[91,762,122],{"class":121},[91,764,125],{"class":105},[91,766,324],{"class":223},[91,768,523],{"class":105},[91,770,658],{"class":227},[91,772,102],{"class":101},[91,774,106],{"class":105},[91,776,334],{"class":101},[91,778,112],{"class":105},[91,780,228],{"class":227},[91,782,783],{"class":101}," any\n",[91,785,786,788,790],{"class":93,"line":141},[91,787,523],{"class":105},[91,789,407],{"class":227},[91,791,183],{"class":105},[91,793,794,796,798,800,802,804,806,808,810,812,814,816,818],{"class":93,"line":186},[91,795,567],{"class":227},[91,797,118],{"class":105},[91,799,122],{"class":121},[91,801,125],{"class":105},[91,803,178],{"class":223},[91,805,523],{"class":105},[91,807,658],{"class":227},[91,809,102],{"class":101},[91,811,106],{"class":105},[91,813,224],{"class":101},[91,815,112],{"class":105},[91,817,228],{"class":227},[91,819,783],{"class":101},[91,821,822],{"class":93,"line":209},[91,823,131],{"class":105},[56,825,826],{},"This prevents us from not satisfying the type we expect before casting.",[82,828,833],{"className":829,"code":831,"language":832},[830],"language-text","// Type 'false' is not assignable to type 'true'.\nreturn {value: false} satisfies MyType\u003Ctrue> as any\n","text",[60,834,831],{"__ignoreMap":87},[56,836,837],{},"It can be very useful for keeping a more relaxed level of type safety inside very strictly typed classes.",[56,839,840],{},"The only error prone thing about doing this is that you do have to know what type you're expecting, but this is a lot safer than no safety at all.",[842,843,844],"style",{},"html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":87,"searchDepth":134,"depth":134,"links":846},[],"2022-10-10T00:00:00.000Z","Typescript's new satisfies is great for it's intended use case, but it's also great for the following use case.","md",null,[852],"typescript",{},{"title":34,"description":848},[856],"tip","qlEDq0ykdmDR4G2eYqmzDbmwIoU55p2r0l7Z9m3xnMI",[859,861],{"title":30,"path":31,"stem":32,"description":860,"children":-1},"Some lua functions to make it possible to use Modifier+Number shortcuts (e.g.Ctrl+1) in neovim.",{"title":38,"path":39,"stem":40,"description":862,"children":-1},"A simple workaround for semantic-release lack of support for 0 major versioned packages.",1758977027537]