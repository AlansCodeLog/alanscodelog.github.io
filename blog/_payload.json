[{"data":1,"prerenderedAt":4155},["ShallowReactive",2],{"navigation":3,"blog-page":50,"blogs":60},[4],{"title":5,"path":6,"stem":7,"children":8,"page":49},"Blog","/blog","blog",[9,13,17,21,25,29,33,37,41,45],{"title":10,"path":11,"stem":12},"Third post","/blog/_lorem-ipsum","blog/_lorem-ipsum",{"title":14,"path":15,"stem":16},"Markdown Style Guide","/blog/_markdown-style-guide","blog/_markdown-style-guide",{"title":18,"path":19,"stem":20},"Remote Debugging Addon for Blender","/blog/blender-debugger","blog/blender-debugger",{"title":22,"path":23,"stem":24},"How to use Dynamic Variables with Tailwind","/blog/dynamic-tailwind","blog/dynamic-tailwind",{"title":26,"path":27,"stem":28},"Krita Popup Palette Improvements","/blog/krita-brush-pr","blog/krita-brush-pr",{"title":30,"path":31,"stem":32},"How to map Mod+Number keys in Vim/Neovim (using Wezterm)","/blog/neovim-wezterm-mod-number-keys","blog/neovim-wezterm-mod-number-keys",{"title":34,"path":35,"stem":36},"Abusing Typescript's New `satisfies` Operator","/blog/satisfies","blog/satisfies",{"title":38,"path":39,"stem":40},"How to Publish v0.x.x Versioned Packages with Semantic Release","/blog/semantic-release-v0","blog/semantic-release-v0",{"title":42,"path":43,"stem":44},"I cave, Tailwind rocks.","/blog/tailwind-rocks","blog/tailwind-rocks",{"title":46,"path":47,"stem":48},"How To Add Tests To A Zig Project","/blog/zig-testing","blog/zig-testing",false,{"id":51,"title":52,"body":53,"description":54,"extension":55,"links":54,"meta":56,"navigation":57,"path":6,"seo":58,"stem":7,"__hash__":59},"pages/blog.yml","Blog Posts",{"title":52,"description":54},null,"yml",{},true,{"title":52,"description":54},"21OiUGsTI_J0Brq0J-0Be-BkkGj6PsWVWMqJvcHQFKY",[61,409,618,2333,2696,3255,3991,4110],{"id":62,"title":46,"body":63,"date":401,"description":108,"extension":402,"image":54,"langs":403,"meta":404,"navigation":57,"path":47,"published":57,"seo":405,"stem":48,"tags":406,"__hash__":408},"blog/blog/zig-testing.md",{"type":64,"value":65,"toc":397},"minimark",[66,78,90,96,99,109,112,117,127,134,167,171,174,282,290,299,387,393],[67,68,69,70,77],"p",{},"I have been dabbling with ",[71,72,76],"a",{"href":73,"rel":74},"https://ziglang.org/",[75],"nofollow","Zig"," lately, and I wanted to add some tests to my tiny project, but this was a bit harder than I thought and the docs on this are sparse. so I thought I'd properly document it.",[67,79,80,81,85,86,89],{},"First, you probably want ",[82,83,84],"code",{},"zig build test"," where test is the build step. Not ",[82,87,88],{},"zig test",".",[67,91,92,93,95],{},"Still, even if you have a test step and you ran ",[82,94,84],{},", you might have been puzzled that no tests were running.",[67,97,98],{},"And if you were using dependencies, you might have gotten an error like this:",[100,101,106],"pre",{"className":102,"code":104,"language":105},[103],"language-text","no module named '...' available within module root\n","text",[82,107,104],{"__ignoreMap":108},"",[67,110,111],{},"Several things are going on here.",[113,114,116],"h2",{"id":115},"adding-all-tests","Adding ALL Tests",[67,118,119,120,122,123,126],{},"If you run ",[82,121,84],{}," it will only run tests in the given ",[82,124,125],{},"root_source_file",", so if you have no tests in main, they won't run.",[67,128,129,130,133],{},"You can get around this with the following magical incantation in ",[82,131,132],{},"src/main.zig",":",[100,135,139],{"className":136,"code":137,"language":138,"meta":108,"style":108},"language-zig shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","test {\n    // include all tests in imported modules, recursively\n    @import(\"std\").testing.refAllDeclsRecursive(@This());\n}\n","zig",[82,140,141,149,155,161],{"__ignoreMap":108},[142,143,146],"span",{"class":144,"line":145},"line",1,[142,147,148],{},"test {\n",[142,150,152],{"class":144,"line":151},2,[142,153,154],{},"    // include all tests in imported modules, recursively\n",[142,156,158],{"class":144,"line":157},3,[142,159,160],{},"    @import(\"std\").testing.refAllDeclsRecursive(@This());\n",[142,162,164],{"class":144,"line":163},4,[142,165,166],{},"}\n",[113,168,170],{"id":169},"sharing-modules-with-the-build-step","Sharing Modules with the Build Step",[67,172,173],{},"The other error is because when you do this:",[100,175,177],{"className":136,"code":176,"language":138,"meta":108,"style":108},"const exe = b.addExecutable(.{\n    .name = \"foot\",\n    .root_source_file = b.path(\"src/main.zig\"),\n    .target = target,\n    .optimize = optimize,\n});\n\nexe.root_module.addImport(...); \n\n// ... \n\nconst tests = b.addTest(.{\n    .root_source_file = b.path(\"src/main.zig\"),\n    .target = target,\n    .optimize = optimize,\n});\n\nconst test_step = b.step(\"test\", \"Run tests.\");\ntest_step.dependOn(&b.addRunArtifact(tests).step);\n",[82,178,179,184,189,194,199,205,211,217,223,228,234,239,245,250,255,260,265,270,276],{"__ignoreMap":108},[142,180,181],{"class":144,"line":145},[142,182,183],{},"const exe = b.addExecutable(.{\n",[142,185,186],{"class":144,"line":151},[142,187,188],{},"    .name = \"foot\",\n",[142,190,191],{"class":144,"line":157},[142,192,193],{},"    .root_source_file = b.path(\"src/main.zig\"),\n",[142,195,196],{"class":144,"line":163},[142,197,198],{},"    .target = target,\n",[142,200,202],{"class":144,"line":201},5,[142,203,204],{},"    .optimize = optimize,\n",[142,206,208],{"class":144,"line":207},6,[142,209,210],{},"});\n",[142,212,214],{"class":144,"line":213},7,[142,215,216],{"emptyLinePlaceholder":57},"\n",[142,218,220],{"class":144,"line":219},8,[142,221,222],{},"exe.root_module.addImport(...); \n",[142,224,226],{"class":144,"line":225},9,[142,227,216],{"emptyLinePlaceholder":57},[142,229,231],{"class":144,"line":230},10,[142,232,233],{},"// ... \n",[142,235,237],{"class":144,"line":236},11,[142,238,216],{"emptyLinePlaceholder":57},[142,240,242],{"class":144,"line":241},12,[142,243,244],{},"const tests = b.addTest(.{\n",[142,246,248],{"class":144,"line":247},13,[142,249,193],{},[142,251,253],{"class":144,"line":252},14,[142,254,198],{},[142,256,258],{"class":144,"line":257},15,[142,259,204],{},[142,261,263],{"class":144,"line":262},16,[142,264,210],{},[142,266,268],{"class":144,"line":267},17,[142,269,216],{"emptyLinePlaceholder":57},[142,271,273],{"class":144,"line":272},18,[142,274,275],{},"const test_step = b.step(\"test\", \"Run tests.\");\n",[142,277,279],{"class":144,"line":278},19,[142,280,281],{},"test_step.dependOn(&b.addRunArtifact(tests).step);\n",[67,283,284,287,288,89],{},[82,285,286],{},"tests.root_module"," has no imports added, so it can't find them. You would have to also add them all to ",[82,289,286],{},[67,291,292,293,298],{},"The good news is zig 0.14.0 added the following feature to avoid this duplication, see ",[71,294,297],{"href":295,"rel":296},"https://github.com/ziglang/zig/pull/20388",[75],"#20388",". Now you can create a module and pass it both to the exe and to tests:",[100,300,302],{"className":136,"code":301,"language":138,"meta":108,"style":108},"const main_module = b.createModule(.{\n    .root_source_file = b.path(\"src/main.zig\"),\n    .target = target,\n    .optimize = optimize,\n});\n\nconst exe = b.addExecutable(.{\n    .name = \"foot\",\n    .root_module = main_module,\n});\n\nexe.root_module.addImport(...); \n\n// ... \nconst tests = b.addTest(.{\n    .root_module = main_module,\n});\n\nconst test_step = b.step(\"test\", \"Run tests.\");\ntest_step.dependOn(&b.addRunArtifact(tests).step);\n",[82,303,304,309,313,317,321,325,329,333,337,342,346,350,354,358,362,366,370,374,378,382],{"__ignoreMap":108},[142,305,306],{"class":144,"line":145},[142,307,308],{},"const main_module = b.createModule(.{\n",[142,310,311],{"class":144,"line":151},[142,312,193],{},[142,314,315],{"class":144,"line":157},[142,316,198],{},[142,318,319],{"class":144,"line":163},[142,320,204],{},[142,322,323],{"class":144,"line":201},[142,324,210],{},[142,326,327],{"class":144,"line":207},[142,328,216],{"emptyLinePlaceholder":57},[142,330,331],{"class":144,"line":213},[142,332,183],{},[142,334,335],{"class":144,"line":219},[142,336,188],{},[142,338,339],{"class":144,"line":225},[142,340,341],{},"    .root_module = main_module,\n",[142,343,344],{"class":144,"line":230},[142,345,210],{},[142,347,348],{"class":144,"line":236},[142,349,216],{"emptyLinePlaceholder":57},[142,351,352],{"class":144,"line":241},[142,353,222],{},[142,355,356],{"class":144,"line":247},[142,357,216],{"emptyLinePlaceholder":57},[142,359,360],{"class":144,"line":252},[142,361,233],{},[142,363,364],{"class":144,"line":257},[142,365,244],{},[142,367,368],{"class":144,"line":262},[142,369,341],{},[142,371,372],{"class":144,"line":267},[142,373,210],{},[142,375,376],{"class":144,"line":272},[142,377,216],{"emptyLinePlaceholder":57},[142,379,380],{"class":144,"line":278},[142,381,275],{},[142,383,385],{"class":144,"line":384},20,[142,386,281],{},[67,388,389,390,392],{},"Now ",[82,391,84],{}," should run all tests and give no missing module errors.",[394,395,396],"style",{},"html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":108,"searchDepth":151,"depth":151,"links":398},[399,400],{"id":115,"depth":151,"text":116},{"id":169,"depth":151,"text":170},"2025-02-15T00:00:00.000Z","md",[138],{},{"title":46,"description":108},[407],"testing","mPBr_ZQT7LTfWOHL418BMIkccbtiI3F9cZevoNLmc2o",{"id":410,"title":22,"body":411,"date":608,"description":609,"extension":402,"image":54,"langs":610,"meta":612,"navigation":57,"path":23,"published":57,"seo":613,"stem":24,"tags":614,"__hash__":617},"blog/blog/dynamic-tailwind.md",{"type":64,"value":412,"toc":606},[413,424,427,430,433,439,501,513,524,578,594,600,603],[67,414,415,416,419,420,423],{},"Have you ever wanted to do ",[82,417,418],{},"p-[${someDynamicValue}]"," in tailwind? Or maybe the more complicated ",[82,421,422],{},"after:content-[${someDynamicValue}]","? Here's a better solution than resorting to a style tag.",[425,426],"hr",{},[67,428,429],{},"Tailwind cannot have dynamic values in it's classes because the stylesheets are compiled at build time, neither the class name nor the value can be made up of dynamic variables for this to work.",[67,431,432],{},"This can be a bit of a pain in certain situations. One obvious solution is to move back to a style tag, but this means now the styles aren't all in one place, the main selling point of tailwind.",[67,434,435,436,438],{},"For certain situations, like ",[82,437,418],{}," we can fallback to the style property:",[100,440,444],{"className":441,"code":442,"language":443,"meta":108,"style":108},"language-vue shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","\u003C!-- I'm using vue here, but all frameworks have a way to do this. -->\n\u003Cdiv\n    :style=\"`padding:${someDynamicValue}`\"\n>\u003C/div>\n","vue",[82,445,446,452,462,490],{"__ignoreMap":108},[142,447,448],{"class":144,"line":145},[142,449,451],{"class":450},"sHwdD","\u003C!-- I'm using vue here, but all frameworks have a way to do this. -->\n",[142,453,454,458],{"class":144,"line":151},[142,455,457],{"class":456},"sMK4o","\u003C",[142,459,461],{"class":460},"swJcz","div\n",[142,463,464,467,470,473,476,480,483,487],{"class":144,"line":157},[142,465,466],{"class":456},"    :",[142,468,394],{"class":469},"spNyl",[142,471,472],{"class":456},"=",[142,474,475],{"class":456},"\"`",[142,477,479],{"class":478},"sfazB","padding:",[142,481,482],{"class":456},"${",[142,484,486],{"class":485},"sTEyZ","someDynamicValue",[142,488,489],{"class":456},"}`\"\n",[142,491,492,495,498],{"class":144,"line":163},[142,493,494],{"class":456},">\u003C/",[142,496,497],{"class":460},"div",[142,499,500],{"class":456},">\n",[67,502,503,504,507,508,512],{},"But this is not always the case. Take ",[82,505,506],{},"after:content[${someDynamicValue}]",". ",[509,510,511],"strong",{},"Style tags cannot target psuedo-elements",", we have to resort to a style tag, or do we?",[67,514,515,523],{},[509,516,517,518,522],{},"Style tags ",[519,520,521],"em",{},"can"," have inline css variables."," So we can actually do this:",[100,525,527],{"className":441,"code":526,"language":443,"meta":108,"style":108},"\u003Cdiv\n    class=\"after:p-[var(--customPadding)]\"\n    :style=\"`--customPadding:${someDynamicValue}`\"\n>\u003C/div>\n",[82,528,529,535,551,570],{"__ignoreMap":108},[142,530,531,533],{"class":144,"line":145},[142,532,457],{"class":456},[142,534,461],{"class":460},[142,536,537,540,542,545,548],{"class":144,"line":151},[142,538,539],{"class":469},"    class",[142,541,472],{"class":456},[142,543,544],{"class":456},"\"",[142,546,547],{"class":478},"after:p-[var(--customPadding)]",[142,549,550],{"class":456},"\"\n",[142,552,553,555,557,559,561,564,566,568],{"class":144,"line":157},[142,554,466],{"class":456},[142,556,394],{"class":469},[142,558,472],{"class":456},[142,560,475],{"class":456},[142,562,563],{"class":478},"--customPadding:",[142,565,482],{"class":456},[142,567,486],{"class":485},[142,569,489],{"class":456},[142,571,572,574,576],{"class":144,"line":163},[142,573,494],{"class":456},[142,575,497],{"class":460},[142,577,500],{"class":456},[67,579,580,581,584,585,588,589,89],{},"Tailwind can now happily compile the class, it's name is no longer dynamic, it's ",[82,582,583],{},".after\\:p-\\[var\\(--customPadding\\)\\]"," and it's value is no longer dynamic, it's ",[82,586,587],{},"var(--customPadding)",". The part of the outputted css that we care about looks like this, here's a link to a ",[71,590,593],{"href":591,"rel":592},"https://play.tailwindcss.com/RcEotAgwA9?file=css",[75],"demo on the playground",[100,595,598],{"className":596,"code":597,"language":105},[103],".after\\:p-\\[var\\(--customPadding\\)\\]::after {\n    padding: var(--customPadding)\n    //...\n}\n",[82,599,597],{"__ignoreMap":108},[67,601,602],{},"And we can change the css variable to whatever we need. It's also very easy to find where the custom value was declared.",[394,604,605],{},"html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":108,"searchDepth":151,"depth":151,"links":607},[],"2023-10-08T00:00:00.000Z","Have you ever wanted to do `p-[${someDynamicValue}]` in tailwind? Or maybe the more complicated `after:content-[${someDynamicValue}]`? Here's a better solution than resorting to a style tag.",[611,443],"css",{},{"title":22,"description":609},[615,616],"tip","tailwind","YSE4rzLoN3rzfvCDO2z3nNrfoOZO8Nha6N9BhB4q0ac",{"id":619,"title":42,"body":620,"date":2324,"description":2325,"extension":402,"image":2326,"langs":2327,"meta":2328,"navigation":57,"path":43,"published":57,"seo":2329,"stem":44,"tags":2330,"__hash__":2332},"blog/blog/tailwind-rocks.md",{"type":64,"value":621,"toc":2313},[622,625,628,631,639,642,645,665,674,677,680,697,1008,1011,1075,1081,1159,1162,1165,1349,1352,1355,1358,1361,1364,1373,1384,1387,1398,1404,1407,1469,1473,1476,1479,1531,1534,1537,1612,1615,1624,1635,1714,1717,1778,1781,1852,1855,1874,1877,2089,2093,2096,2101,2124,2141,2145,2153,2156,2166,2170,2177,2212,2219,2223,2226,2270,2274,2277,2310],[67,623,624],{},"My first impression of tailwind was 🤮, css in html, not this again. What about seperation of concerns! When I looked at examples they just looked like some sort of class soup. The first example has to be scrolled because the lines are so long! Utility functions are a nice idea I'd been toying with adopting, but surely this went to far?",[67,626,627],{},"I had looked into other css frameworks but it was easier to just roll my own than customize a utility framework so I didn't. I'd been toying with a theme management system / variable generator for apps, so using someone else's variables did not make sense. For a while I just used css with the variables my package produced to keep a consistent design.",[67,629,630],{},"Tailwind just seemed like another utility based css library that wouldn't benefit me very much.",[67,632,633,634],{},"But after seeing it praised again and again, I had to try it. ",[71,635,638],{"href":636,"rel":637},"https://tailwindcss.com/docs/utility-first#:~:text=you%20have%20to%20actually%20try%20it",[75],"The docs are not wrong about this.",[67,640,641],{},"I tried it on a complicated component library to really battle test it and I finally understood what all the praise was about.",[67,643,644],{},"It's not just the points you hear all the time. There were also some things that aren't obvious on first glance that I really liked:",[646,647,648,652,659,662],"ul",{},[649,650,651],"li",{},"It's very easy to customize and make custom plugins.",[649,653,654,655,658],{},"You can quickly use custom values when you need them (e.g. ",[82,656,657],{},"border-[calc(...)]",").",[649,660,661],{},"Many utility functions do more than one thing and make it easy to do common things that tend to bloat css.",[649,663,664],{},"Predictable application and overriding of styles (assuming the use of something like tailwind-merge).",[67,666,667,668,673],{},"It's hard to believe, but these all add up to make the class soup actually far exceed my previous scss in simplicity, readability, and maintainability. The ",[71,669,672],{"href":670,"rel":671},"https://tailwindcss.com/docs/utility-first",[75],"link above"," shows this to some extent but I did not even see this until I actually decided to try tailwind. It really should be one of the first things you see.",[67,675,676],{},"Also you don't have to put it all in one line! Why is it like that in so many examples, 😭?",[67,678,679],{},"You can still write very readable styles if you want. And once you get a hang for the basic utility classes (this does not take as long as you'd think), the intent of the styles is far far clearer.",[67,681,682,683,685,686,696],{},"Here's my own example. Where before in a my component library might have css that looked something like this (and yes, I know the ",[519,684,611],{}," could be simplified, but in exchange for verbosity elsewhere",[687,688,689],"sup",{},[71,690,695],{"href":691,"ariaDescribedBy":692,"dataFootnoteRef":108,"id":694},"#user-content-fn-1",[693],"footnote-label","user-content-fnref-1","1","):",[100,698,702],{"className":699,"code":700,"language":701,"meta":108,"style":108},"language-scss shiki shiki-themes material-theme-lighter material-theme material-theme-palenight",".component {\n    padding: 0 var(--padding-s);\n    background: var(--color-bg-el) ;\n    &.border {\n        border: var(--border-width) solid var(--color-border);\n        &:focus { border-color: var(--color-border-focus) ;}\n    }\n    &:focus { color: var(--color-text-focus) ; }\n    &.disabled { background: var(--color-bg-disabled); }\n    &.disabled:focus { color: var(--color-text-disabled);}\n    &.border.disabled:focus { border-color: var(--color-border-focus) ;}\n}\n.wraper {\n    .component.disabled.border & {\n        text-decoration-line: line-through;\n    }\n}\n","scss",[82,703,704,715,740,760,772,801,831,836,866,894,922,954,958,967,987,1000,1004],{"__ignoreMap":108},[142,705,706,708,712],{"class":144,"line":145},[142,707,89],{"class":456},[142,709,711],{"class":710},"sBMFI","component",[142,713,714],{"class":456}," {\n",[142,716,717,721,723,727,731,734,737],{"class":144,"line":151},[142,718,720],{"class":719},"sqsOY","    padding",[142,722,133],{"class":456},[142,724,726],{"class":725},"sbssI"," 0",[142,728,730],{"class":729},"s2Zo4"," var",[142,732,733],{"class":456},"(",[142,735,736],{"class":485},"--padding-s",[142,738,739],{"class":456},");\n",[142,741,742,745,747,749,751,754,757],{"class":144,"line":157},[142,743,744],{"class":719},"    background",[142,746,133],{"class":456},[142,748,730],{"class":729},[142,750,733],{"class":456},[142,752,753],{"class":485},"--color-bg-el",[142,755,756],{"class":456},")",[142,758,759],{"class":456}," ;\n",[142,761,762,765,767,770],{"class":144,"line":163},[142,763,764],{"class":710},"    &",[142,766,89],{"class":456},[142,768,769],{"class":710},"border",[142,771,714],{"class":456},[142,773,774,777,779,781,783,786,788,791,794,796,799],{"class":144,"line":201},[142,775,776],{"class":719},"        border",[142,778,133],{"class":456},[142,780,730],{"class":729},[142,782,733],{"class":456},[142,784,785],{"class":485},"--border-width",[142,787,756],{"class":456},[142,789,790],{"class":485}," solid ",[142,792,793],{"class":729},"var",[142,795,733],{"class":456},[142,797,798],{"class":485},"--color-border",[142,800,739],{"class":456},[142,802,803,806,808,811,814,817,819,821,823,826,828],{"class":144,"line":207},[142,804,805],{"class":710},"        &",[142,807,133],{"class":456},[142,809,810],{"class":469},"focus",[142,812,813],{"class":456}," {",[142,815,816],{"class":719}," border-color",[142,818,133],{"class":456},[142,820,730],{"class":729},[142,822,733],{"class":456},[142,824,825],{"class":485},"--color-border-focus",[142,827,756],{"class":456},[142,829,830],{"class":456}," ;}\n",[142,832,833],{"class":144,"line":213},[142,834,835],{"class":456},"    }\n",[142,837,838,840,842,844,846,849,851,853,855,858,860,863],{"class":144,"line":219},[142,839,764],{"class":710},[142,841,133],{"class":456},[142,843,810],{"class":469},[142,845,813],{"class":456},[142,847,848],{"class":719}," color",[142,850,133],{"class":456},[142,852,730],{"class":729},[142,854,733],{"class":456},[142,856,857],{"class":485},"--color-text-focus",[142,859,756],{"class":456},[142,861,862],{"class":456}," ;",[142,864,865],{"class":456}," }\n",[142,867,868,870,872,875,877,880,882,884,886,889,892],{"class":144,"line":225},[142,869,764],{"class":710},[142,871,89],{"class":456},[142,873,874],{"class":710},"disabled",[142,876,813],{"class":456},[142,878,879],{"class":719}," background",[142,881,133],{"class":456},[142,883,730],{"class":729},[142,885,733],{"class":456},[142,887,888],{"class":485},"--color-bg-disabled",[142,890,891],{"class":456},");",[142,893,865],{"class":456},[142,895,896,898,900,902,904,906,908,910,912,914,916,919],{"class":144,"line":230},[142,897,764],{"class":710},[142,899,89],{"class":456},[142,901,874],{"class":710},[142,903,133],{"class":456},[142,905,810],{"class":469},[142,907,813],{"class":456},[142,909,848],{"class":719},[142,911,133],{"class":456},[142,913,730],{"class":729},[142,915,733],{"class":456},[142,917,918],{"class":485},"--color-text-disabled",[142,920,921],{"class":456},");}\n",[142,923,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952],{"class":144,"line":236},[142,925,764],{"class":710},[142,927,89],{"class":456},[142,929,769],{"class":710},[142,931,89],{"class":456},[142,933,874],{"class":710},[142,935,133],{"class":456},[142,937,810],{"class":469},[142,939,813],{"class":456},[142,941,816],{"class":719},[142,943,133],{"class":456},[142,945,730],{"class":729},[142,947,733],{"class":456},[142,949,825],{"class":485},[142,951,756],{"class":456},[142,953,830],{"class":456},[142,955,956],{"class":144,"line":241},[142,957,166],{"class":456},[142,959,960,962,965],{"class":144,"line":247},[142,961,89],{"class":456},[142,963,964],{"class":710},"wraper",[142,966,714],{"class":456},[142,968,969,972,974,976,978,980,982,985],{"class":144,"line":252},[142,970,971],{"class":456},"    .",[142,973,711],{"class":710},[142,975,89],{"class":456},[142,977,874],{"class":710},[142,979,89],{"class":456},[142,981,769],{"class":710},[142,983,984],{"class":710}," &",[142,986,714],{"class":456},[142,988,989,992,994,997],{"class":144,"line":257},[142,990,991],{"class":719},"        text-decoration-line",[142,993,133],{"class":456},[142,995,996],{"class":485}," line-through",[142,998,999],{"class":456},";\n",[142,1001,1002],{"class":144,"line":262},[142,1003,835],{"class":456},[142,1005,1006],{"class":144,"line":267},[142,1007,166],{"class":456},[67,1009,1010],{},"with html (vue) that looked like this:",[100,1012,1016],{"className":1013,"code":1014,"language":1015,"meta":108,"style":108},"language-vue-html shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","\u003Cdiv\n    :class=\"classes\"\n>\n    \u003Cdiv class=\"wrapper\"/>\n\u003C/div>\n","vue-html",[82,1017,1018,1024,1040,1044,1066],{"__ignoreMap":108},[142,1019,1020,1022],{"class":144,"line":145},[142,1021,457],{"class":456},[142,1023,461],{"class":460},[142,1025,1026,1028,1031,1033,1035,1038],{"class":144,"line":151},[142,1027,466],{"class":456},[142,1029,1030],{"class":469},"class",[142,1032,472],{"class":456},[142,1034,544],{"class":456},[142,1036,1037],{"class":485},"classes",[142,1039,550],{"class":456},[142,1041,1042],{"class":144,"line":157},[142,1043,500],{"class":456},[142,1045,1046,1049,1051,1054,1056,1058,1061,1063],{"class":144,"line":163},[142,1047,1048],{"class":456},"    \u003C",[142,1050,497],{"class":460},[142,1052,1053],{"class":469}," class",[142,1055,472],{"class":456},[142,1057,544],{"class":456},[142,1059,1060],{"class":478},"wrapper",[142,1062,544],{"class":456},[142,1064,1065],{"class":456},"/>\n",[142,1067,1068,1071,1073],{"class":144,"line":201},[142,1069,1070],{"class":456},"\u003C/",[142,1072,497],{"class":460},[142,1074,500],{"class":456},[67,1076,1077,1078,1080],{},"Where ",[82,1079,1037],{}," was a computed red in setup, often abstracted away to a function for common states:",[100,1082,1086],{"className":1083,"code":1084,"language":1085,"meta":108,"style":108},"language-js shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","const classes = computed(() => ({\n    disabled: props.disabled,\n    border: props.border\n    ...\n}))\n","js",[82,1087,1088,1115,1132,1146,1151],{"__ignoreMap":108},[142,1089,1090,1093,1096,1098,1101,1103,1106,1109,1112],{"class":144,"line":145},[142,1091,1092],{"class":469},"const",[142,1094,1095],{"class":485}," classes ",[142,1097,472],{"class":456},[142,1099,1100],{"class":729}," computed",[142,1102,733],{"class":485},[142,1104,1105],{"class":456},"()",[142,1107,1108],{"class":469}," =>",[142,1110,1111],{"class":485}," (",[142,1113,1114],{"class":456},"{\n",[142,1116,1117,1120,1122,1125,1127,1129],{"class":144,"line":151},[142,1118,1119],{"class":460},"    disabled",[142,1121,133],{"class":456},[142,1123,1124],{"class":485}," props",[142,1126,89],{"class":456},[142,1128,874],{"class":485},[142,1130,1131],{"class":456},",\n",[142,1133,1134,1137,1139,1141,1143],{"class":144,"line":157},[142,1135,1136],{"class":460},"    border",[142,1138,133],{"class":456},[142,1140,1124],{"class":485},[142,1142,89],{"class":456},[142,1144,1145],{"class":485},"border\n",[142,1147,1148],{"class":144,"line":163},[142,1149,1150],{"class":456},"    ...\n",[142,1152,1153,1156],{"class":144,"line":201},[142,1154,1155],{"class":456},"}",[142,1157,1158],{"class":485},"))\n",[67,1160,1161],{},"Seperation of concerns, right...",[67,1163,1164],{},"Now with tailwind, after a bit of experimenting and the help of tailwind merge I can have html (vue) that looks like this. Same number of css rules.",[100,1166,1168],{"className":1013,"code":1167,"language":1015,"meta":108,"style":108},"    \u003Cdiv\n        :class=\"twMerge(`\n            p-3\n            bg-neutral-50\n            focus:text-blue-500\n            `,\n            border && `\n                border\n                border-neutral-900\n                focus:border-blue-500\n            `,\n            disabled && `\n                bg-neutral-300\n                focus:text-neutral-500\n            `,\n            border && disabled && `\n                border-neutral-500\n            `)\"\n    >\n        \u003Cdiv :class=\"disabled && `line-through`\">\u003Cdiv>\n    \u003C/div>\n",[82,1169,1170,1176,1195,1200,1205,1210,1217,1227,1232,1237,1242,1248,1257,1262,1267,1273,1285,1290,1298,1303,1339],{"__ignoreMap":108},[142,1171,1172,1174],{"class":144,"line":145},[142,1173,1048],{"class":456},[142,1175,461],{"class":460},[142,1177,1178,1181,1183,1185,1187,1190,1192],{"class":144,"line":151},[142,1179,1180],{"class":456},"        :",[142,1182,1030],{"class":469},[142,1184,472],{"class":456},[142,1186,544],{"class":456},[142,1188,1189],{"class":729},"twMerge",[142,1191,733],{"class":456},[142,1193,1194],{"class":456},"`\n",[142,1196,1197],{"class":144,"line":157},[142,1198,1199],{"class":478},"            p-3\n",[142,1201,1202],{"class":144,"line":163},[142,1203,1204],{"class":478},"            bg-neutral-50\n",[142,1206,1207],{"class":144,"line":201},[142,1208,1209],{"class":478},"            focus:text-blue-500\n",[142,1211,1212,1215],{"class":144,"line":207},[142,1213,1214],{"class":456},"            `",[142,1216,1131],{"class":456},[142,1218,1219,1222,1225],{"class":144,"line":213},[142,1220,1221],{"class":485},"            border",[142,1223,1224],{"class":456}," && ",[142,1226,1194],{"class":456},[142,1228,1229],{"class":144,"line":219},[142,1230,1231],{"class":478},"                border\n",[142,1233,1234],{"class":144,"line":225},[142,1235,1236],{"class":478},"                border-neutral-900\n",[142,1238,1239],{"class":144,"line":230},[142,1240,1241],{"class":478},"                focus:border-blue-500\n",[142,1243,1244,1246],{"class":144,"line":236},[142,1245,1214],{"class":456},[142,1247,1131],{"class":456},[142,1249,1250,1253,1255],{"class":144,"line":241},[142,1251,1252],{"class":485},"            disabled",[142,1254,1224],{"class":456},[142,1256,1194],{"class":456},[142,1258,1259],{"class":144,"line":247},[142,1260,1261],{"class":478},"                bg-neutral-300\n",[142,1263,1264],{"class":144,"line":252},[142,1265,1266],{"class":478},"                focus:text-neutral-500\n",[142,1268,1269,1271],{"class":144,"line":257},[142,1270,1214],{"class":456},[142,1272,1131],{"class":456},[142,1274,1275,1277,1279,1281,1283],{"class":144,"line":262},[142,1276,1221],{"class":485},[142,1278,1224],{"class":456},[142,1280,874],{"class":485},[142,1282,1224],{"class":456},[142,1284,1194],{"class":456},[142,1286,1287],{"class":144,"line":267},[142,1288,1289],{"class":478},"                border-neutral-500\n",[142,1291,1292,1294,1296],{"class":144,"line":272},[142,1293,1214],{"class":456},[142,1295,756],{"class":456},[142,1297,550],{"class":456},[142,1299,1300],{"class":144,"line":278},[142,1301,1302],{"class":456},"    >\n",[142,1304,1305,1308,1310,1313,1315,1317,1319,1321,1323,1326,1329,1332,1335,1337],{"class":144,"line":384},[142,1306,1307],{"class":456},"        \u003C",[142,1309,497],{"class":460},[142,1311,1312],{"class":456}," :",[142,1314,1030],{"class":469},[142,1316,472],{"class":456},[142,1318,544],{"class":456},[142,1320,874],{"class":485},[142,1322,1224],{"class":456},[142,1324,1325],{"class":456},"`",[142,1327,1328],{"class":478},"line-through",[142,1330,1331],{"class":456},"`\"",[142,1333,1334],{"class":456},">\u003C",[142,1336,497],{"class":460},[142,1338,500],{"class":456},[142,1340,1342,1345,1347],{"class":144,"line":1341},21,[142,1343,1344],{"class":456},"    \u003C/",[142,1346,497],{"class":460},[142,1348,500],{"class":456},[67,1350,1351],{},"And that's it.",[67,1353,1354],{},"There is no more jumping to the js or the css to look things up.",[67,1356,1357],{},"All styles will apply predictably. It's clear what's happening, which classes are being applied when. With the help of tailwind merge we can rely on order and use variables like in the example to avoid specificity issues.*.",[67,1359,1360],{},"Just a breath of fresh air.",[67,1362,1363],{},"Even with one style per line for readability I have managed to shrink the file size of ALL the components I converted.",[67,1365,1366,1367,1372],{},"I only now have two sections to worry about now, the logic, and the presentation. I've come to understand that presentation is invariably linked to state, and separating the css actually always makes things more painful. The creator of tailwind actually mentions this in the ",[71,1368,1371],{"href":1369,"rel":1370},"https://adamwathan.me/css-utility-classes-and-separation-of-concerns/",[75],"blog post"," where he made the arguments for tailwind on it's release, and I had read this before, but it never sunk in how painful this was until I wasn't experiencing the pain anymore.",[67,1374,1375,1376,89],{},"I was actually surprised how much faster I could style things (~3x) even when I had to have the tailwind docs pinned to lookup stuff and my tailwind autocomplete was not working well",[687,1377,1378],{},[71,1379,1383],{"href":1380,"ariaDescribedBy":1381,"dataFootnoteRef":108,"id":1382},"#user-content-fn-2",[693],"user-content-fnref-2","2",[67,1385,1386],{},"I've come to appreciate how easy it can do things that used to take multiple lines.",[67,1388,1389,1390,1397],{},"Take for example ",[71,1391,1394],{"href":1392,"rel":1393},"https://tailwindcss.com/docs/text-overflow#truncate",[75],[82,1395,1396],{},"truncate"," which does:",[100,1399,1402],{"className":1400,"code":1401,"language":105},[103],"overflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n",[82,1403,1401],{"__ignoreMap":108},[67,1405,1406],{},"Or gradients! If there's one thing I hate, it's writing css gradients. But in tailwind it's super simple, even with complex stops and everything:",[100,1408,1410],{"className":1013,"code":1409,"language":1015,"meta":108,"style":108},"\u003Cdiv class=\"bg-gradient-to-r from-white to-black\"/>\n\u003Cdiv class=\"\n    bg-gradient-to-r\n    from-white from-10%\n    via-blue-500 via-20%\n    to-black to-50%\n\"/>\n",[82,1411,1412,1431,1443,1448,1453,1458,1463],{"__ignoreMap":108},[142,1413,1414,1416,1418,1420,1422,1424,1427,1429],{"class":144,"line":145},[142,1415,457],{"class":456},[142,1417,497],{"class":460},[142,1419,1053],{"class":469},[142,1421,472],{"class":456},[142,1423,544],{"class":456},[142,1425,1426],{"class":478},"bg-gradient-to-r from-white to-black",[142,1428,544],{"class":456},[142,1430,1065],{"class":456},[142,1432,1433,1435,1437,1439,1441],{"class":144,"line":151},[142,1434,457],{"class":456},[142,1436,497],{"class":460},[142,1438,1053],{"class":469},[142,1440,472],{"class":456},[142,1442,550],{"class":456},[142,1444,1445],{"class":144,"line":157},[142,1446,1447],{"class":478},"    bg-gradient-to-r\n",[142,1449,1450],{"class":144,"line":163},[142,1451,1452],{"class":478},"    from-white from-10%\n",[142,1454,1455],{"class":144,"line":201},[142,1456,1457],{"class":478},"    via-blue-500 via-20%\n",[142,1459,1460],{"class":144,"line":207},[142,1461,1462],{"class":478},"    to-black to-50%\n",[142,1464,1465,1467],{"class":144,"line":213},[142,1466,544],{"class":456},[142,1468,1065],{"class":456},[113,1470,1472],{"id":1471},"tailwind-merge","* Tailwind Merge",[67,1474,1475],{},"But, tailwind merge is a MUST for complex applications and component libraries to avoid specificity issues. The reason why is that while tailwind cannot escape the css selector specificity problem completely, in fact we loose a bit of control.",[67,1477,1478],{},"See in regular css, if I have two selectors with equal specificity, the last one will win (note that this helps avoid the mess of having many variants and states):",[100,1480,1483],{"className":1481,"code":1482,"language":611,"meta":108,"style":108},"language-css shiki shiki-themes material-theme-lighter material-theme material-theme-palenight",".input {\n    &.border:focus {...}\n    &.disabled:focus {...}\n}\n",[82,1484,1485,1494,1508,1527],{"__ignoreMap":108},[142,1486,1487,1489,1492],{"class":144,"line":145},[142,1488,89],{"class":456},[142,1490,1491],{"class":710},"input",[142,1493,714],{"class":456},[142,1495,1496,1499,1501,1503,1506],{"class":144,"line":151},[142,1497,1498],{"class":485},"    &.",[142,1500,769],{"class":719},[142,1502,133],{"class":456},[142,1504,1505],{"class":485},"focus {...",[142,1507,166],{"class":456},[142,1509,1510,1512,1514,1516,1518,1520,1522,1525],{"class":144,"line":157},[142,1511,764],{"class":485},[142,1513,89],{"class":456},[142,1515,874],{"class":710},[142,1517,133],{"class":456},[142,1519,810],{"class":469},[142,1521,813],{"class":456},[142,1523,1524],{"class":485},"...",[142,1526,166],{"class":456},[142,1528,1529],{"class":144,"line":163},[142,1530,166],{"class":485},[67,1532,1533],{},"In tailwind, you DO NOT have control over the order. The order of the classes is irrelevant, BUT the order tailwind declares them in the stylesheets is and this cannot be controlled (since a single rule might be used in many components).",[67,1535,1536],{},"If you do this, depending on what colors you picked, the style might or might not apply on disabled:",[100,1538,1540],{"className":1013,"code":1539,"language":1015,"meta":108,"style":108},"\u003Cdiv\n    :class=\"\n        border && `\n        border\n        border-red-500` +\n        disabled && `\n        border-neutral-500\n    `\"\n>\n\u003C/div>\n",[82,1541,1542,1548,1558,1566,1571,1581,1590,1595,1600,1604],{"__ignoreMap":108},[142,1543,1544,1546],{"class":144,"line":145},[142,1545,457],{"class":456},[142,1547,461],{"class":460},[142,1549,1550,1552,1554,1556],{"class":144,"line":151},[142,1551,466],{"class":456},[142,1553,1030],{"class":469},[142,1555,472],{"class":456},[142,1557,550],{"class":456},[142,1559,1560,1562,1564],{"class":144,"line":157},[142,1561,776],{"class":485},[142,1563,1224],{"class":456},[142,1565,1194],{"class":456},[142,1567,1568],{"class":144,"line":163},[142,1569,1570],{"class":478},"        border\n",[142,1572,1573,1576,1578],{"class":144,"line":201},[142,1574,1575],{"class":478},"        border-red-500",[142,1577,1325],{"class":456},[142,1579,1580],{"class":456}," +\n",[142,1582,1583,1586,1588],{"class":144,"line":207},[142,1584,1585],{"class":485},"        disabled",[142,1587,1224],{"class":456},[142,1589,1194],{"class":456},[142,1591,1592],{"class":144,"line":213},[142,1593,1594],{"class":478},"        border-neutral-500\n",[142,1596,1597],{"class":144,"line":219},[142,1598,1599],{"class":456},"    `\"\n",[142,1601,1602],{"class":144,"line":225},[142,1603,500],{"class":456},[142,1605,1606,1608,1610],{"class":144,"line":230},[142,1607,1070],{"class":456},[142,1609,497],{"class":460},[142,1611,500],{"class":456},[67,1613,1614],{},"Another thing I've seen done is using data attributes which looks cleaner and will seem to work at first, but this is because the data attributes are adding specificity to the selector, +1 for each data attribute.",[67,1616,1617,1618,1623],{},"Here's a ",[71,1619,1622],{"href":1620,"rel":1621},"https://specificity.keegan.st/",[75],"specificity calculator"," you can use to see this.",[67,1625,1626,1627,1630,1631,1634],{},"Tailwind data attribute variants create the following selectors: ",[82,1628,1629],{},"{ESCAPED_NAME}:[data-border=\"true\"]:[...]"," you can input ",[82,1632,1633],{},".class:[data]:[data]"," to quickly test, it would be the same thing.",[100,1636,1638],{"className":1013,"code":1637,"language":1015,"meta":108,"style":108},"\u003Cdiv\n    :data-border=\"border\"\n    :data-disabled=\"disabled\"\n    class=\"\n        data-[border=true]:border\n        data-[border=true]:border-red-500\n        data-[border=true]:data-[disabled]:border-neutral-500\n    \">\n\u003C/div>\n\n",[82,1639,1640,1646,1661,1676,1684,1689,1694,1699,1706],{"__ignoreMap":108},[142,1641,1642,1644],{"class":144,"line":145},[142,1643,457],{"class":456},[142,1645,461],{"class":460},[142,1647,1648,1650,1653,1655,1657,1659],{"class":144,"line":151},[142,1649,466],{"class":456},[142,1651,1652],{"class":469},"data-border",[142,1654,472],{"class":456},[142,1656,544],{"class":456},[142,1658,769],{"class":485},[142,1660,550],{"class":456},[142,1662,1663,1665,1668,1670,1672,1674],{"class":144,"line":157},[142,1664,466],{"class":456},[142,1666,1667],{"class":469},"data-disabled",[142,1669,472],{"class":456},[142,1671,544],{"class":456},[142,1673,874],{"class":485},[142,1675,550],{"class":456},[142,1677,1678,1680,1682],{"class":144,"line":163},[142,1679,539],{"class":469},[142,1681,472],{"class":456},[142,1683,550],{"class":456},[142,1685,1686],{"class":144,"line":201},[142,1687,1688],{"class":478},"        data-[border=true]:border\n",[142,1690,1691],{"class":144,"line":207},[142,1692,1693],{"class":478},"        data-[border=true]:border-red-500\n",[142,1695,1696],{"class":144,"line":213},[142,1697,1698],{"class":478},"        data-[border=true]:data-[disabled]:border-neutral-500\n",[142,1700,1701,1704],{"class":144,"line":219},[142,1702,1703],{"class":456},"    \"",[142,1705,500],{"class":456},[142,1707,1708,1710,1712],{"class":144,"line":225},[142,1709,1070],{"class":456},[142,1711,497],{"class":460},[142,1713,500],{"class":456},[67,1715,1716],{},"You can easily run into the following problem, where these have equal specificity (2):",[100,1718,1720],{"className":1013,"code":1719,"language":1015,"meta":108,"style":108},"\u003Cbutton\n    :data-primary=\"primary\"\n    class=\"\n        data-[primary=true]:text-white\n        focus:text=blue-200\n    \">\n\u003C/button>\n\n",[82,1721,1722,1729,1745,1753,1758,1763,1769],{"__ignoreMap":108},[142,1723,1724,1726],{"class":144,"line":145},[142,1725,457],{"class":456},[142,1727,1728],{"class":460},"button\n",[142,1730,1731,1733,1736,1738,1740,1743],{"class":144,"line":151},[142,1732,466],{"class":456},[142,1734,1735],{"class":469},"data-primary",[142,1737,472],{"class":456},[142,1739,544],{"class":456},[142,1741,1742],{"class":485},"primary",[142,1744,550],{"class":456},[142,1746,1747,1749,1751],{"class":144,"line":157},[142,1748,539],{"class":469},[142,1750,472],{"class":456},[142,1752,550],{"class":456},[142,1754,1755],{"class":144,"line":163},[142,1756,1757],{"class":478},"        data-[primary=true]:text-white\n",[142,1759,1760],{"class":144,"line":201},[142,1761,1762],{"class":478},"        focus:text=blue-200\n",[142,1764,1765,1767],{"class":144,"line":207},[142,1766,1703],{"class":456},[142,1768,500],{"class":456},[142,1770,1771,1773,1776],{"class":144,"line":213},[142,1772,1070],{"class":456},[142,1774,1775],{"class":460},"button",[142,1777,500],{"class":456},[67,1779,1780],{},"Or worse, here the text will never change on focus when the button is primary and has a border because that has a specificity of 3.",[100,1782,1784],{"className":1013,"code":1783,"language":1015,"meta":108,"style":108},"\u003Cbutton\n    :data-primary=\"primary\"\n    :data-border=\"border\"\n    class=\"\n        data-[border=true]:data-[primary=true]:text-white\n        focus:text-blue-200\n    \">\n\u003C/button>\n",[82,1785,1786,1792,1806,1820,1828,1833,1838,1844],{"__ignoreMap":108},[142,1787,1788,1790],{"class":144,"line":145},[142,1789,457],{"class":456},[142,1791,1728],{"class":460},[142,1793,1794,1796,1798,1800,1802,1804],{"class":144,"line":151},[142,1795,466],{"class":456},[142,1797,1735],{"class":469},[142,1799,472],{"class":456},[142,1801,544],{"class":456},[142,1803,1742],{"class":485},[142,1805,550],{"class":456},[142,1807,1808,1810,1812,1814,1816,1818],{"class":144,"line":157},[142,1809,466],{"class":456},[142,1811,1652],{"class":469},[142,1813,472],{"class":456},[142,1815,544],{"class":456},[142,1817,769],{"class":485},[142,1819,550],{"class":456},[142,1821,1822,1824,1826],{"class":144,"line":163},[142,1823,539],{"class":469},[142,1825,472],{"class":456},[142,1827,550],{"class":456},[142,1829,1830],{"class":144,"line":201},[142,1831,1832],{"class":478},"        data-[border=true]:data-[primary=true]:text-white\n",[142,1834,1835],{"class":144,"line":207},[142,1836,1837],{"class":478},"        focus:text-blue-200\n",[142,1839,1840,1842],{"class":144,"line":213},[142,1841,1703],{"class":456},[142,1843,500],{"class":456},[142,1845,1846,1848,1850],{"class":144,"line":219},[142,1847,1070],{"class":456},[142,1849,1775],{"class":460},[142,1851,500],{"class":456},[67,1853,1854],{},"At this point you must pick a solution. You can:",[646,1856,1857,1864,1871],{},[649,1858,1859,1860,1863],{},"Add an important ",[82,1861,1862],{},"focus:!text-blue-200"," which can make it harder for the end user of components to override the rule.",[649,1865,1866,1867,1870],{},"Add ",[82,1868,1869],{},"data-[border=true]:data-[primary=true]:focus:text-blue-200",", but apart from creating hard to read css, this will create a lot of unneeded class soup in the html since the button would contain all styles for all variants even if you only end up using the one of them.",[649,1872,1873],{},"Use tailwind merge to bypass the problem.",[67,1875,1876],{},"If you pick tailwind-merge though, it is still a good idea to leave the data attributes, at least on the root of the components if you care about users being able to theme the app with css.",[100,1878,1880],{"className":1013,"code":1879,"language":1015,"meta":108,"style":108},"\u003Cdiv\n    :class=\"twMerge(`\n        p-3\n        bg-neutral-50\n        focus:text-blue-500\n        `,\n        border && `\n            border\n            border-neutral-900\n            focus:border-blue-500\n        `,\n        disabled && `\n            bg-neutral-300\n            focus:text-neutral-500\n        `,\n        border && disabled && `\n            border-neutral-500\n        `,\n        $attrs.class\n    )\"\n    v-bind=\"{...$attrs, class: undefined }\"\n>\n    \u003Cdiv :class=\"disabled && `line-through`\">\u003Cdiv>\n\u003C/div>\n",[82,1881,1882,1888,1904,1909,1914,1919,1926,1934,1939,1944,1949,1955,1963,1968,1973,1979,1991,1996,2002,2012,2019,2044,2049,2080],{"__ignoreMap":108},[142,1883,1884,1886],{"class":144,"line":145},[142,1885,457],{"class":456},[142,1887,461],{"class":460},[142,1889,1890,1892,1894,1896,1898,1900,1902],{"class":144,"line":151},[142,1891,466],{"class":456},[142,1893,1030],{"class":469},[142,1895,472],{"class":456},[142,1897,544],{"class":456},[142,1899,1189],{"class":729},[142,1901,733],{"class":456},[142,1903,1194],{"class":456},[142,1905,1906],{"class":144,"line":157},[142,1907,1908],{"class":478},"        p-3\n",[142,1910,1911],{"class":144,"line":163},[142,1912,1913],{"class":478},"        bg-neutral-50\n",[142,1915,1916],{"class":144,"line":201},[142,1917,1918],{"class":478},"        focus:text-blue-500\n",[142,1920,1921,1924],{"class":144,"line":207},[142,1922,1923],{"class":456},"        `",[142,1925,1131],{"class":456},[142,1927,1928,1930,1932],{"class":144,"line":213},[142,1929,776],{"class":485},[142,1931,1224],{"class":456},[142,1933,1194],{"class":456},[142,1935,1936],{"class":144,"line":219},[142,1937,1938],{"class":478},"            border\n",[142,1940,1941],{"class":144,"line":225},[142,1942,1943],{"class":478},"            border-neutral-900\n",[142,1945,1946],{"class":144,"line":230},[142,1947,1948],{"class":478},"            focus:border-blue-500\n",[142,1950,1951,1953],{"class":144,"line":236},[142,1952,1923],{"class":456},[142,1954,1131],{"class":456},[142,1956,1957,1959,1961],{"class":144,"line":241},[142,1958,1585],{"class":485},[142,1960,1224],{"class":456},[142,1962,1194],{"class":456},[142,1964,1965],{"class":144,"line":247},[142,1966,1967],{"class":478},"            bg-neutral-300\n",[142,1969,1970],{"class":144,"line":252},[142,1971,1972],{"class":478},"            focus:text-neutral-500\n",[142,1974,1975,1977],{"class":144,"line":257},[142,1976,1923],{"class":456},[142,1978,1131],{"class":456},[142,1980,1981,1983,1985,1987,1989],{"class":144,"line":262},[142,1982,776],{"class":485},[142,1984,1224],{"class":456},[142,1986,874],{"class":485},[142,1988,1224],{"class":456},[142,1990,1194],{"class":456},[142,1992,1993],{"class":144,"line":267},[142,1994,1995],{"class":478},"            border-neutral-500\n",[142,1997,1998,2000],{"class":144,"line":272},[142,1999,1923],{"class":456},[142,2001,1131],{"class":456},[142,2003,2004,2007,2009],{"class":144,"line":278},[142,2005,2006],{"class":485},"        $attrs",[142,2008,89],{"class":456},[142,2010,2011],{"class":485},"class\n",[142,2013,2014,2017],{"class":144,"line":384},[142,2015,2016],{"class":456},"    )",[142,2018,550],{"class":456},[142,2020,2021,2024,2026,2028,2031,2034,2037,2039,2042],{"class":144,"line":1341},[142,2022,2023],{"class":469},"    v-bind",[142,2025,472],{"class":456},[142,2027,544],{"class":456},[142,2029,2030],{"class":456},"{...",[142,2032,2033],{"class":485},"$attrs",[142,2035,2036],{"class":456},", ",[142,2038,1030],{"class":460},[142,2040,2041],{"class":456},": undefined }",[142,2043,550],{"class":456},[142,2045,2047],{"class":144,"line":2046},22,[142,2048,500],{"class":456},[142,2050,2052,2054,2056,2058,2060,2062,2064,2066,2068,2070,2072,2074,2076,2078],{"class":144,"line":2051},23,[142,2053,1048],{"class":456},[142,2055,497],{"class":460},[142,2057,1312],{"class":456},[142,2059,1030],{"class":469},[142,2061,472],{"class":456},[142,2063,544],{"class":456},[142,2065,874],{"class":485},[142,2067,1224],{"class":456},[142,2069,1325],{"class":456},[142,2071,1328],{"class":478},[142,2073,1331],{"class":456},[142,2075,1334],{"class":456},[142,2077,497],{"class":460},[142,2079,500],{"class":456},[142,2081,2083,2085,2087],{"class":144,"line":2082},24,[142,2084,1070],{"class":456},[142,2086,497],{"class":460},[142,2088,500],{"class":456},[113,2090,2092],{"id":2091},"the-downsides","The Downsides",[67,2094,2095],{},"There are, of course, always some downsides.",[2097,2098,2100],"h3",{"id":2099},"inconsistent-naming","Inconsistent Naming",[67,2102,2103,2104,2107,2108,2111,2112,2115,2116,2119,2120,2123],{},"After some use, this is the one thing that really bugs me. You have ",[82,2105,2106],{},"py-*"," for top+bottom padding but ",[82,2109,2110],{},"gap-y-*"," for gaps? This happens in a few other places with units as well. You have spacing that goes down to ",[82,2113,2114],{},"-0.5"," but opacity which in css is ",[82,2117,2118],{},"0-1"," goes from ",[82,2121,2122],{},"0-100"," ???",[67,2125,2126,2127,2130,2131,2036,2133,2136,2137,2140],{},"I can understand not always using the same scales (e.g. ",[82,2128,2129],{},"sm"," , ",[82,2132,402],{},[82,2134,2135],{},"xl"," vs ",[82,2138,2139],{},"0-*",") but for some of the odder names, because the auto complete does not work based on the css property name, it can be very hard to find the utility you want. I have to keep the docs opened and pinned for actual searching. But I guess that could be considered more the autocomplete's fault, and not tailwind.",[2097,2142,2144],{"id":2143},"missing-utilities","Missing Utilities",[67,2146,2147,2148,89],{},"Some css properties that are now pretty usable, do not exist yet. For example, text-shadow does not exist because ",[71,2149,2152],{"href":2150,"rel":2151},"https://github.com/tailwindlabs/tailwindcss/issues/162#issuecomment-777889883",[75],"which default styles to add has not been decided yet",[67,2154,2155],{},"Which fair, but I really wish they would at least they were provided as experimental properties or something instead of having to rely on other's plugins.",[67,2157,2158,2159,2162,2163,89],{},"Also some which should really exist, don't, such as grid with ",[82,2160,2161],{},"auto-fill"," and ",[82,2164,2165],{},"auto-fit",[2097,2167,2169],{"id":2168},"hard-to-use-existing-tailwind-variables-in-custom-utilities","Hard to use Existing Tailwind Variables in Custom Utilities",[67,2171,2172,2173,2176],{},"I've written a few custom utilities for gradients, but couldn't for example, re-use the to/from-* gradient utilities and the css variables they create\nbecause I can't seperate the part I need (the color). For example, ",[82,2174,2175],{},"from-black from-0%"," will create:",[100,2178,2180],{"className":1481,"code":2179,"language":611,"meta":108,"style":108},"-tw-gradient-from-position: 0%;\n--tw-gradient-from: #000 var(--tw-gradient-from-position);\n\n// which are then used like this:\n--tw-gradient-stops: var(--tw-gradient-from);\n",[82,2181,2182,2187,2198,2202,2207],{"__ignoreMap":108},[142,2183,2184],{"class":144,"line":145},[142,2185,2186],{"class":485},"-tw-gradient-from-position: 0%;\n",[142,2188,2189,2192,2195],{"class":144,"line":151},[142,2190,2191],{"class":485},"--tw-gradient-from: ",[142,2193,2194],{"class":456},"#",[142,2196,2197],{"class":485},"000 var(--tw-gradient-from-position);\n",[142,2199,2200],{"class":144,"line":157},[142,2201,216],{"emptyLinePlaceholder":57},[142,2203,2204],{"class":144,"line":163},[142,2205,2206],{"class":485},"// which are then used like this:\n",[142,2208,2209],{"class":144,"line":201},[142,2210,2211],{"class":485},"--tw-gradient-stops: var(--tw-gradient-from);\n",[67,2213,2214,2215,2218],{},"I can use the position, but not the color, there is no ",[82,2216,2217],{},"--tw-gradient-from-color",", so I have to create my own which can get messy.",[2097,2220,2222],{"id":2221},"dynamic-values","Dynamic values",[67,2224,2225],{},"The stylesheet is compiled at build time (so that unused styles can be removed), so this means you can't use dynamic styles. This will not work. You have to use an inline style tag or a script tag.",[100,2227,2229],{"className":441,"code":2228,"language":443,"meta":108,"style":108},"\u003Cdiv :class=\"`p-[${customValue}]`\">\n\u003C/div>\n\n",[82,2230,2231,2262],{"__ignoreMap":108},[142,2232,2233,2235,2237,2239,2241,2243,2245,2248,2250,2253,2255,2258,2260],{"class":144,"line":145},[142,2234,457],{"class":456},[142,2236,497],{"class":460},[142,2238,1312],{"class":456},[142,2240,1030],{"class":469},[142,2242,472],{"class":456},[142,2244,475],{"class":456},[142,2246,2247],{"class":478},"p-[",[142,2249,482],{"class":456},[142,2251,2252],{"class":485},"customValue",[142,2254,1155],{"class":456},[142,2256,2257],{"class":478},"]",[142,2259,1331],{"class":456},[142,2261,500],{"class":456},[142,2263,2264,2266,2268],{"class":144,"line":151},[142,2265,1070],{"class":456},[142,2267,497],{"class":460},[142,2269,500],{"class":456},[113,2271,2273],{"id":2272},"conclusion","Conclusion",[67,2275,2276],{},"I've been using it now for a few months and I can never go back to the old way.",[2278,2279,2282,2287],"section",{"className":2280,"dataFootnotes":108},[2281],"footnotes",[113,2283,2286],{"className":2284,"id":693},[2285],"sr-only","Footnotes",[2288,2289,2290,2301],"ol",{},[649,2291,2293,2294],{"id":2292},"user-content-fn-1","I know, I could apply all the classes to the wrapper as well or use some BEM naming scheme and simplify the css, but then in complex elements, they need to be attached/created for every element which might only use a single state class, which probably isn't an issue performance wise if the classes aren't changing every second, but just irks me. And conditionally giving them the needed classes is beyond painful so I often stuck with this. ",[71,2295,2300],{"href":2296,"ariaLabel":2297,"className":2298,"dataFootnoteBackref":108},"#user-content-fnref-1","Back to reference 1",[2299],"data-footnote-backref","↩",[649,2302,2304,2305],{"id":2303},"user-content-fn-2","I had trouble getting it to work with vscode + vue. Also you must type the name exactly and this is hard given the inconsistent naming. ",[71,2306,2300],{"href":2307,"ariaLabel":2308,"className":2309,"dataFootnoteBackref":108},"#user-content-fnref-2","Back to reference 2",[2299],[394,2311,2312],{},"html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sqsOY, html code.shiki .sqsOY{--shiki-light:#8796B0;--shiki-default:#B2CCD6;--shiki-dark:#B2CCD6}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}",{"title":108,"searchDepth":151,"depth":151,"links":2314},[2315,2316,2322,2323],{"id":1471,"depth":151,"text":1472},{"id":2091,"depth":151,"text":2092,"children":2317},[2318,2319,2320,2321],{"id":2099,"depth":157,"text":2100},{"id":2143,"depth":157,"text":2144},{"id":2168,"depth":157,"text":2169},{"id":2221,"depth":157,"text":2222},{"id":2272,"depth":151,"text":2273},{"id":693,"depth":151,"text":2286},"2023-09-14T00:00:00.000Z","CSS in HTML? Class soup? Relearning CSS property names? No thanks, right? or maybe I was wrong...","/thumbs/tailwind-logo.svg",[611,616],{},{"title":42,"description":2325},[2331],"styling","33bpco3e3mndu9sKuXUbsiToUiv4sUvX5HYc0bRVqoY",{"id":2334,"title":38,"body":2335,"date":2688,"description":2689,"extension":402,"image":54,"langs":54,"meta":2690,"navigation":57,"path":39,"published":57,"seo":2691,"stem":40,"tags":2692,"__hash__":2695},"blog/blog/semantic-release-v0.md",{"type":64,"value":2336,"toc":2686},[2337,2352,2355,2358,2361,2370,2375,2406,2415,2418,2421,2430,2496,2514,2594,2597,2601,2604,2615,2618,2621,2641,2644,2659,2666,2675,2678,2684],[67,2338,2339,2340,2345,2346,2351],{},"I love ",[71,2341,2344],{"href":2342,"rel":2343},"https://www.npmjs.com/package/semantic-release",[75],"semantic-release",", but it unfortunately doesn't support and is probably never going to ",[71,2347,2350],{"href":2348,"rel":2349},"https://github.com/semantic-release/semantic-release/issues/1507",[75],"support 0 major versioned packages",". The issue for it doesn't really contain a good workaround and has unfortunately been locked due to people being rude.",[67,2353,2354],{},"But I'd really like to v0 version some packages. I really regret having had to publish some highly experimental packages starting with v1. In their highly experimental phase it's usually just me using them and I pin them when using them so breaking changes aren't an issue. If I start at v1 and properly commit breaking changes, by the time the package is stable it's at v3+ or something. And the entire time the package says it's a WIP but the version is v1+, and I hate it. Often I won't event properly committed breaking changes unless they're major, half defeating the point of semantic versioning.",[67,2356,2357],{},"I've also tried avoiding publishing them in the first place and just using them directly from the repo, but this often requires more effort to get working (since the prepare script needs to be defined to properly build the package after downloading). Still good to publish packages that just work like this, but I always end up running into obscure problems doing things this way.",[67,2359,2360],{},"Ideally I want to just start at v0, write commits that create proper release notes listing the breaking changes, but not have them major bump until the package is more stable and I publish v1.",[67,2362,2363,2364,2369],{},"I got really annoyed at this situation recently so started looking at some of the alternatives mentioned in the issue, but most do not do everything semantic-release does. ",[71,2365,2368],{"href":2366,"rel":2367},"https://github.com/googleapis/release-please",[75],"release-please"," was the closest, but it's missing an easier way to manager branches and the workflow seems more error prone to me.",[2371,2372,2374],"h1",{"id":2373},"workaround","Workaround",[67,2376,2377,2378,2381,2382,2385,2386,2036,2389,2036,2392,2395,2396,2398,2399,2402,2403,2405],{},"This is the simplest workaround I've found. Instead of the regular ",[82,2379,2380],{},"feat/fix/..."," commits, I create ",[82,2383,2384],{},"v0feat/v0fix/...",". You could do this for all the commit types. I chose to just create three, ",[82,2387,2388],{},"v0feat",[82,2390,2391],{},"v0fix",[82,2393,2394],{},"v0breaking",", and technically ",[82,2397,2391],{}," is not needed since it's the same as ",[82,2400,2401],{},"fix",", but I liked the consistent naming. How you set this up, depends on what you'd like to bump what. Technically the only one you truly need is ",[82,2404,2394],{}," so release notes show breaking changes without a major bump.",[67,2407,2408,2409,2414],{},"Now I keep my own ",[71,2410,2413],{"href":2411,"rel":2412},"https://github.com/AlansCodeLog/my-semantic-release-config/blob/master/release.config.js",[75],"semantic-release-config"," so this was easier for me to do. You will need to either configure certain plugins manually each time or I highly suggest creating your own config and abstracting everything away (no more need to install all the deps/plugins needed, your config can just do it for you).",[67,2416,2417],{},"How to do so or the various places you can place your config is out of scope for this post.",[67,2419,2420],{},"I'll just be showing you how to configure the plugins.",[67,2422,2423,2424,2429],{},"First, ",[71,2425,2428],{"href":2426,"rel":2427},"https://github.com/semantic-release/commit-analyzer",[75],"commit-analyzer",". This will tell semantic-release how much to bump.",[100,2431,2435],{"className":2432,"code":2433,"language":2434,"meta":108,"style":108},"language-jsonc shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","[\n    \"@semantic-release/commit-analyzer\",\n    {\n        // you can use a preset here if you like\n        \"preset\": \"conventionalcommits\",\n        \"releaseRules\": [\n            { \"type\": \"v0feat\", \"release\": \"patch\" },\n            { \"type\": \"v0fix\", \"release\": \"patch\" },\n            { \"type\": \"v0breaking\",  \"release\": \"minor\" }\n        ]\n    }\n],\n","jsonc",[82,2436,2437,2442,2447,2452,2457,2462,2467,2472,2477,2482,2487,2491],{"__ignoreMap":108},[142,2438,2439],{"class":144,"line":145},[142,2440,2441],{},"[\n",[142,2443,2444],{"class":144,"line":151},[142,2445,2446],{},"    \"@semantic-release/commit-analyzer\",\n",[142,2448,2449],{"class":144,"line":157},[142,2450,2451],{},"    {\n",[142,2453,2454],{"class":144,"line":163},[142,2455,2456],{},"        // you can use a preset here if you like\n",[142,2458,2459],{"class":144,"line":201},[142,2460,2461],{},"        \"preset\": \"conventionalcommits\",\n",[142,2463,2464],{"class":144,"line":207},[142,2465,2466],{},"        \"releaseRules\": [\n",[142,2468,2469],{"class":144,"line":213},[142,2470,2471],{},"            { \"type\": \"v0feat\", \"release\": \"patch\" },\n",[142,2473,2474],{"class":144,"line":219},[142,2475,2476],{},"            { \"type\": \"v0fix\", \"release\": \"patch\" },\n",[142,2478,2479],{"class":144,"line":225},[142,2480,2481],{},"            { \"type\": \"v0breaking\",  \"release\": \"minor\" }\n",[142,2483,2484],{"class":144,"line":230},[142,2485,2486],{},"        ]\n",[142,2488,2489],{"class":144,"line":236},[142,2490,835],{},[142,2492,2493],{"class":144,"line":241},[142,2494,2495],{},"],\n",[67,2497,2498,2499,2504,2505,2508,2509],{},"Then, ",[71,2500,2503],{"href":2501,"rel":2502},"https://github.com/semantic-release/release-notes-generator",[75],"release-notes-generator",". This will tell semantic-release how to format the commit message headers. The docs for ",[82,2506,2507],{},"presetConfig"," are a bit hidden. You can find the full spec for them ",[71,2510,2513],{"href":2511,"rel":2512},"https://github.com/conventional-changelog/conventional-changelog-config-spec",[75],"here",[100,2515,2517],{"className":2432,"code":2516,"language":2434,"meta":108,"style":108},"[\n    \"@semantic-release/release-notes-generator\",\n    {\n        // note that if you use a preset, you will inherit it's options regarding what text counts as breaking changes\n        \"preset\": \"conventionalcommits\",\n        \"presetConfig\": {\n            \"types\": [\n                { \"type\":\"v0feat\", \"section\": \":star: New Features\" },\n                { \"type\": \"v0fix\", \"section\": \":bug: Fixes\" },\n                // Simulate a breaking change\n                { \"type\": \"v0breaking\", \"section\": \":warning: BREAKING CHANGES\" }\n            ]\n        }\n\n    }\n]\n",[82,2518,2519,2523,2528,2532,2537,2541,2546,2551,2556,2561,2566,2571,2576,2581,2585,2589],{"__ignoreMap":108},[142,2520,2521],{"class":144,"line":145},[142,2522,2441],{},[142,2524,2525],{"class":144,"line":151},[142,2526,2527],{},"    \"@semantic-release/release-notes-generator\",\n",[142,2529,2530],{"class":144,"line":157},[142,2531,2451],{},[142,2533,2534],{"class":144,"line":163},[142,2535,2536],{},"        // note that if you use a preset, you will inherit it's options regarding what text counts as breaking changes\n",[142,2538,2539],{"class":144,"line":201},[142,2540,2461],{},[142,2542,2543],{"class":144,"line":207},[142,2544,2545],{},"        \"presetConfig\": {\n",[142,2547,2548],{"class":144,"line":213},[142,2549,2550],{},"            \"types\": [\n",[142,2552,2553],{"class":144,"line":219},[142,2554,2555],{},"                { \"type\":\"v0feat\", \"section\": \":star: New Features\" },\n",[142,2557,2558],{"class":144,"line":225},[142,2559,2560],{},"                { \"type\": \"v0fix\", \"section\": \":bug: Fixes\" },\n",[142,2562,2563],{"class":144,"line":230},[142,2564,2565],{},"                // Simulate a breaking change\n",[142,2567,2568],{"class":144,"line":236},[142,2569,2570],{},"                { \"type\": \"v0breaking\", \"section\": \":warning: BREAKING CHANGES\" }\n",[142,2572,2573],{"class":144,"line":241},[142,2574,2575],{},"            ]\n",[142,2577,2578],{"class":144,"line":247},[142,2579,2580],{},"        }\n",[142,2582,2583],{"class":144,"line":252},[142,2584,216],{"emptyLinePlaceholder":57},[142,2586,2587],{"class":144,"line":257},[142,2588,835],{},[142,2590,2591],{"class":144,"line":262},[142,2592,2593],{},"]\n",[67,2595,2596],{},"You can see the configs are pretty similar. In my config I create one shared object to pass as necessary to the plugins.",[2371,2598,2600],{"id":2599},"usage","Usage",[67,2602,2603],{},"First you will need to create your first commit. Usually I will just create an empty commit.",[100,2605,2609],{"className":2606,"code":2607,"language":2608,"meta":108,"style":108},"language-sh shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","git commit --allow-empty \"v0feat: empty\"\n","sh",[82,2610,2611],{"__ignoreMap":108},[142,2612,2613],{"class":144,"line":145},[142,2614,2607],{},[67,2616,2617],{},"Now if you tried to run semantic release now, you would still get version v1.0.0.",[67,2619,2620],{},"You will need to tag the initial commit as v0.0.0 to trick semantic-release into working how we want.",[100,2622,2624],{"className":2606,"code":2623,"language":2608,"meta":108,"style":108},"git tag v0.0.0\n# don't forget!\ngit push --tags \n",[82,2625,2626,2631,2636],{"__ignoreMap":108},[142,2627,2628],{"class":144,"line":145},[142,2629,2630],{},"git tag v0.0.0\n",[142,2632,2633],{"class":144,"line":151},[142,2634,2635],{},"# don't forget!\n",[142,2637,2638],{"class":144,"line":157},[142,2639,2640],{},"git push --tags\n",[67,2642,2643],{},"Then add your code and your real commit.",[100,2645,2647],{"className":2606,"code":2646,"language":2608,"meta":108,"style":108},"git add .\ngit commit \"v0feat: initial\"\n",[82,2648,2649,2654],{"__ignoreMap":108},[142,2650,2651],{"class":144,"line":145},[142,2652,2653],{},"git add .\n",[142,2655,2656],{"class":144,"line":151},[142,2657,2658],{},"git commit \"v0feat: initial\"\n",[67,2660,2661,2662,2665],{},"Now you can do a dry run. Note you will need to push to your repo before doing so. So disable your release workflow if you have one. I personally have an env variable ",[82,2663,2664],{},"ENABLE_RELEASE"," I use to enable/disable, which has not been enabled yet at this point.",[100,2667,2669],{"className":2606,"code":2668,"language":2608,"meta":108,"style":108},"npx semantic-release --dry-run --no-ci #--debug\n",[82,2670,2671],{"__ignoreMap":108},[142,2672,2673],{"class":144,"line":145},[142,2674,2668],{},[67,2676,2677],{},"It should now print v0.0.1!",[67,2679,2680,2681,2683],{},"Now so long as you do not commit any commit types that trigger a major bump or use any text that triggers a breaking change in your commit messages (that's what ",[82,2682,2394],{}," is for), you should stay in v0.",[394,2685,396],{},{"title":108,"searchDepth":151,"depth":151,"links":2687},[],"2023-07-16T00:00:00.000Z","A simple workaround for semantic-release lack of support for 0 major versioned packages.",{},{"title":38,"description":2689},[2344,2693,2694],"build-tools","ci","A5RfqBy_HaUFS65zSz9pYHUNtn1JSxY_TV6Pmtusljc",{"id":2697,"title":30,"body":2698,"date":3246,"description":3247,"extension":402,"image":3248,"langs":3249,"meta":3250,"navigation":57,"path":31,"published":57,"seo":3251,"stem":32,"tags":3252,"__hash__":3254},"blog/blog/neovim-wezterm-mod-number-keys.md",{"type":64,"value":2699,"toc":3244},[2700,2703,2712,2720,2727,2736,2750,2757,2760,2763,2992,3002,3005,3207,3210,3239,3242],[67,2701,2702],{},"I've been recently giving neovim a serious try (this is my fourth/fifth attempt). And I think this time it's going to work out, but I really miss Modifier+Number shortcuts.",[67,2704,2705,2706,2711],{},"Usually you cannot map to modifies + number keys in in neovim (e.g. Ctrl+1). You can ",[71,2707,2710],{"href":2708,"rel":2709},"https://vi.stackexchange.com/questions/19358/cannot-map-ctrl-number-except-6-or",[75],"try to map the raw key sequences"," but this is a pain and does not work for all numbers.",[67,2713,2714,2715,756],{},"The best way to get around this is to map to an obscure keybinding then make the terminal remap Mod+Number to those odd keybindings. I never got around to actually doing this usually because most terminal's configs are static it's also often a pain to remap keys (e.g. ",[71,2716,2719],{"href":2717,"rel":2718},"https://sw.kovidgoyal.net/kitty/conf/#shortcut-kitty.Send-arbitrary-text-on-key-presses",[75],"kitty, I like you, but...",[67,2721,2722,2723,2726],{},"Also the ideal way to do this is to map them to a key chain like ",[82,2724,2725],{},"{ObscureCombo} {Mods}+{Remap}"," so as to not take up useful keys. But that's even more painful.",[67,2728,2729,2730,2735],{},"Recently though I tried and switched to ",[71,2731,2734],{"href":2732,"rel":2733},"https://github.com/wez/wezterm",[75],"wezterm"," for my terminal emulator, and it's configured through lua which makes this super easy to do for all sequences.",[67,2737,2738,2739,2742,2743,2746,2747,89],{},"For example, I picked ",[82,2740,2741],{},"Ctrl+Alt+Shift+F12"," for the obscure key combo and letters for the remap part. So ",[82,2744,2745],{},"Ctrl+1"," would map to ",[82,2748,2749],{},"Ctrl+Alt+Shift+F12 Ctrl+q",[67,2751,2752,2753,2756],{},"The letter mapping is to avoid breaking anything. If we mapped them to, for example, the F keys again, we might accidentally shoot ourselves in the foot when pressing ",[82,2754,2755],{},"Alt+4"," .",[67,2758,2759],{},"Note that we also can't map the numbers without the modifiers, since wezterm has no way to know if we're in normal mode or not, and we would be left unable to type numbers if we did so.",[67,2761,2762],{},"Here's my wezterm function for remapping with all mods.",[100,2764,2768],{"className":2765,"code":2766,"language":2767,"meta":108,"style":108},"language-lua shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","-- Allows using Mods+Number in the receiving program if it does not support it.\n-- In the receiving program, the keymap needs to be `\u003CC-A-S-F12> \u003CMods-F{q-p}>`\nlocal remapModNumber = function(keyConfig, modsToRemap)\n    -- it's not \u003CMods-F{Number}> for obvious reasons (i.e. A-F4)\n    local numMap = {\n        [\"1\"] = \"q\",\n        [\"2\"] = \"w\",\n        [\"3\"] = \"e\",\n        [\"4\"] = \"r\",\n        [\"5\"] = \"t\",\n        [\"6\"] = \"y\",\n        [\"7\"] = \"u\",\n        [\"8\"] = \"i\",\n        [\"9\"] = \"o\",\n        [\"0\"] = \"p\",\n    }\n\n    local createModNumberRemap = function(key, mods)\n        local res = {\n            key = key,\n            mods = mods,\n            action = act.Multiple({\n                --obscure key to use as base\n                act.SendKey({ key = \"F12\", mods = \"CTRL|SHIFT|ALT\" }),\n                act.SendKey({ key = numMap[key], mods = mods }),\n            }),\n        }\n        return res\n    end\n    print(keyConfig)\n    for i = 0, 9 do\n        for _, mod in ipairs(modsToRemap) do\n            -- cant insert normally???\n            keyConfig[#keyConfig + 1] = createModNumberRemap(tostring(i), mod)\n        end\n    end\nend\nconfig.keys = {\n    -- ...your other keybindings\n}\n\nremapModNumber(config.keys, { \"CTRL\", \"SHIFT\", \"ALT\", \"CTRL|ALT\", \"ALT|SHIFT\", \"CTRL|SHIFT\", \"ALT|CTRL\", \"CTRL|SHIFT|ALT\" })\n","lua",[82,2769,2770,2775,2780,2785,2790,2795,2800,2805,2810,2815,2820,2825,2830,2835,2840,2845,2849,2853,2858,2863,2868,2873,2878,2883,2888,2894,2900,2905,2911,2917,2923,2929,2935,2941,2947,2953,2958,2964,2970,2976,2981,2986],{"__ignoreMap":108},[142,2771,2772],{"class":144,"line":145},[142,2773,2774],{},"-- Allows using Mods+Number in the receiving program if it does not support it.\n",[142,2776,2777],{"class":144,"line":151},[142,2778,2779],{},"-- In the receiving program, the keymap needs to be `\u003CC-A-S-F12> \u003CMods-F{q-p}>`\n",[142,2781,2782],{"class":144,"line":157},[142,2783,2784],{},"local remapModNumber = function(keyConfig, modsToRemap)\n",[142,2786,2787],{"class":144,"line":163},[142,2788,2789],{},"    -- it's not \u003CMods-F{Number}> for obvious reasons (i.e. A-F4)\n",[142,2791,2792],{"class":144,"line":201},[142,2793,2794],{},"    local numMap = {\n",[142,2796,2797],{"class":144,"line":207},[142,2798,2799],{},"        [\"1\"] = \"q\",\n",[142,2801,2802],{"class":144,"line":213},[142,2803,2804],{},"        [\"2\"] = \"w\",\n",[142,2806,2807],{"class":144,"line":219},[142,2808,2809],{},"        [\"3\"] = \"e\",\n",[142,2811,2812],{"class":144,"line":225},[142,2813,2814],{},"        [\"4\"] = \"r\",\n",[142,2816,2817],{"class":144,"line":230},[142,2818,2819],{},"        [\"5\"] = \"t\",\n",[142,2821,2822],{"class":144,"line":236},[142,2823,2824],{},"        [\"6\"] = \"y\",\n",[142,2826,2827],{"class":144,"line":241},[142,2828,2829],{},"        [\"7\"] = \"u\",\n",[142,2831,2832],{"class":144,"line":247},[142,2833,2834],{},"        [\"8\"] = \"i\",\n",[142,2836,2837],{"class":144,"line":252},[142,2838,2839],{},"        [\"9\"] = \"o\",\n",[142,2841,2842],{"class":144,"line":257},[142,2843,2844],{},"        [\"0\"] = \"p\",\n",[142,2846,2847],{"class":144,"line":262},[142,2848,835],{},[142,2850,2851],{"class":144,"line":267},[142,2852,216],{"emptyLinePlaceholder":57},[142,2854,2855],{"class":144,"line":272},[142,2856,2857],{},"    local createModNumberRemap = function(key, mods)\n",[142,2859,2860],{"class":144,"line":278},[142,2861,2862],{},"        local res = {\n",[142,2864,2865],{"class":144,"line":384},[142,2866,2867],{},"            key = key,\n",[142,2869,2870],{"class":144,"line":1341},[142,2871,2872],{},"            mods = mods,\n",[142,2874,2875],{"class":144,"line":2046},[142,2876,2877],{},"            action = act.Multiple({\n",[142,2879,2880],{"class":144,"line":2051},[142,2881,2882],{},"                --obscure key to use as base\n",[142,2884,2885],{"class":144,"line":2082},[142,2886,2887],{},"                act.SendKey({ key = \"F12\", mods = \"CTRL|SHIFT|ALT\" }),\n",[142,2889,2891],{"class":144,"line":2890},25,[142,2892,2893],{},"                act.SendKey({ key = numMap[key], mods = mods }),\n",[142,2895,2897],{"class":144,"line":2896},26,[142,2898,2899],{},"            }),\n",[142,2901,2903],{"class":144,"line":2902},27,[142,2904,2580],{},[142,2906,2908],{"class":144,"line":2907},28,[142,2909,2910],{},"        return res\n",[142,2912,2914],{"class":144,"line":2913},29,[142,2915,2916],{},"    end\n",[142,2918,2920],{"class":144,"line":2919},30,[142,2921,2922],{},"    print(keyConfig)\n",[142,2924,2926],{"class":144,"line":2925},31,[142,2927,2928],{},"    for i = 0, 9 do\n",[142,2930,2932],{"class":144,"line":2931},32,[142,2933,2934],{},"        for _, mod in ipairs(modsToRemap) do\n",[142,2936,2938],{"class":144,"line":2937},33,[142,2939,2940],{},"            -- cant insert normally???\n",[142,2942,2944],{"class":144,"line":2943},34,[142,2945,2946],{},"            keyConfig[#keyConfig + 1] = createModNumberRemap(tostring(i), mod)\n",[142,2948,2950],{"class":144,"line":2949},35,[142,2951,2952],{},"        end\n",[142,2954,2956],{"class":144,"line":2955},36,[142,2957,2916],{},[142,2959,2961],{"class":144,"line":2960},37,[142,2962,2963],{},"end\n",[142,2965,2967],{"class":144,"line":2966},38,[142,2968,2969],{},"config.keys = {\n",[142,2971,2973],{"class":144,"line":2972},39,[142,2974,2975],{},"    -- ...your other keybindings\n",[142,2977,2979],{"class":144,"line":2978},40,[142,2980,166],{},[142,2982,2984],{"class":144,"line":2983},41,[142,2985,216],{"emptyLinePlaceholder":57},[142,2987,2989],{"class":144,"line":2988},42,[142,2990,2991],{},"remapModNumber(config.keys, { \"CTRL\", \"SHIFT\", \"ALT\", \"CTRL|ALT\", \"ALT|SHIFT\", \"CTRL|SHIFT\", \"ALT|CTRL\", \"CTRL|SHIFT|ALT\" })\n",[67,2993,2994,2995,2998,2999,89],{},"Then in vim, if we wanted to use ",[82,2996,2997],{},"\u003CC-1>"," we would map to ",[82,3000,3001],{},"\u003CC-S-A-F12>\u003CC-q>",[67,3003,3004],{},"I've also added a small helper function in my local utils module to help with this. I might extract this later into a plugin.",[100,3006,3008],{"className":2765,"code":3007,"language":2767,"meta":108,"style":108},"local M = {}\nlocal config = {\n    baseSequence = \"\u003CC-S-A-F12>\",\n}\nM.setup = function(opts)\n    opts = opts or {}\n    vim.tbl_extend(\"force\", config, opts)\nend\nlocal replacements = {\n    [\"1\"] = \"q\",\n    [\"2\"] = \"w\",\n    [\"3\"] = \"e\",\n    [\"4\"] = \"r\",\n    [\"5\"] = \"t\",\n    [\"6\"] = \"y\",\n    [\"7\"] = \"u\",\n    [\"8\"] = \"i\",\n    [\"9\"] = \"o\",\n    [\"0\"] = \"p\",\n}\nM.mapNum = function(keysString)\n    local str = \"\"\n    for i = 1, #keysString do\n        local prevPrevChar = i > 2 and keysString:sub(i - 2, i - 2) or nil\n\n        local prevChar = i > 1 and keysString:sub(i - 1, i - 1) or nil\n        local char = keysString:sub(i, i)\n        local isNumber = tonumber(char) ~= nil\n        local prevIsNumber = prevChar ~= nil and tonumber(prevChar) ~= nil\n        local prevIsAllowed = prevChar == nil or prevChar ~= \"F\" or prevIsNumber\n        local prevPrevIsAllowed = prevPrevChar == nil or prevPrevChar ~= \"F\"\n        if isNumber and prevIsAllowed and prevPrevIsAllowed then\n            str = str .. replacements[char]\n        else\n            str = str .. char\n        end\n    end\n    return config.baseSequence .. str\nend\n\nreturn M\n",[82,3009,3010,3015,3020,3025,3029,3034,3039,3044,3048,3053,3058,3063,3068,3073,3078,3083,3088,3093,3098,3103,3107,3112,3117,3122,3127,3131,3136,3141,3146,3151,3156,3161,3166,3171,3176,3181,3185,3189,3194,3198,3202],{"__ignoreMap":108},[142,3011,3012],{"class":144,"line":145},[142,3013,3014],{},"local M = {}\n",[142,3016,3017],{"class":144,"line":151},[142,3018,3019],{},"local config = {\n",[142,3021,3022],{"class":144,"line":157},[142,3023,3024],{},"    baseSequence = \"\u003CC-S-A-F12>\",\n",[142,3026,3027],{"class":144,"line":163},[142,3028,166],{},[142,3030,3031],{"class":144,"line":201},[142,3032,3033],{},"M.setup = function(opts)\n",[142,3035,3036],{"class":144,"line":207},[142,3037,3038],{},"    opts = opts or {}\n",[142,3040,3041],{"class":144,"line":213},[142,3042,3043],{},"    vim.tbl_extend(\"force\", config, opts)\n",[142,3045,3046],{"class":144,"line":219},[142,3047,2963],{},[142,3049,3050],{"class":144,"line":225},[142,3051,3052],{},"local replacements = {\n",[142,3054,3055],{"class":144,"line":230},[142,3056,3057],{},"    [\"1\"] = \"q\",\n",[142,3059,3060],{"class":144,"line":236},[142,3061,3062],{},"    [\"2\"] = \"w\",\n",[142,3064,3065],{"class":144,"line":241},[142,3066,3067],{},"    [\"3\"] = \"e\",\n",[142,3069,3070],{"class":144,"line":247},[142,3071,3072],{},"    [\"4\"] = \"r\",\n",[142,3074,3075],{"class":144,"line":252},[142,3076,3077],{},"    [\"5\"] = \"t\",\n",[142,3079,3080],{"class":144,"line":257},[142,3081,3082],{},"    [\"6\"] = \"y\",\n",[142,3084,3085],{"class":144,"line":262},[142,3086,3087],{},"    [\"7\"] = \"u\",\n",[142,3089,3090],{"class":144,"line":267},[142,3091,3092],{},"    [\"8\"] = \"i\",\n",[142,3094,3095],{"class":144,"line":272},[142,3096,3097],{},"    [\"9\"] = \"o\",\n",[142,3099,3100],{"class":144,"line":278},[142,3101,3102],{},"    [\"0\"] = \"p\",\n",[142,3104,3105],{"class":144,"line":384},[142,3106,166],{},[142,3108,3109],{"class":144,"line":1341},[142,3110,3111],{},"M.mapNum = function(keysString)\n",[142,3113,3114],{"class":144,"line":2046},[142,3115,3116],{},"    local str = \"\"\n",[142,3118,3119],{"class":144,"line":2051},[142,3120,3121],{},"    for i = 1, #keysString do\n",[142,3123,3124],{"class":144,"line":2082},[142,3125,3126],{},"        local prevPrevChar = i > 2 and keysString:sub(i - 2, i - 2) or nil\n",[142,3128,3129],{"class":144,"line":2890},[142,3130,216],{"emptyLinePlaceholder":57},[142,3132,3133],{"class":144,"line":2896},[142,3134,3135],{},"        local prevChar = i > 1 and keysString:sub(i - 1, i - 1) or nil\n",[142,3137,3138],{"class":144,"line":2902},[142,3139,3140],{},"        local char = keysString:sub(i, i)\n",[142,3142,3143],{"class":144,"line":2907},[142,3144,3145],{},"        local isNumber = tonumber(char) ~= nil\n",[142,3147,3148],{"class":144,"line":2913},[142,3149,3150],{},"        local prevIsNumber = prevChar ~= nil and tonumber(prevChar) ~= nil\n",[142,3152,3153],{"class":144,"line":2919},[142,3154,3155],{},"        local prevIsAllowed = prevChar == nil or prevChar ~= \"F\" or prevIsNumber\n",[142,3157,3158],{"class":144,"line":2925},[142,3159,3160],{},"        local prevPrevIsAllowed = prevPrevChar == nil or prevPrevChar ~= \"F\"\n",[142,3162,3163],{"class":144,"line":2931},[142,3164,3165],{},"        if isNumber and prevIsAllowed and prevPrevIsAllowed then\n",[142,3167,3168],{"class":144,"line":2937},[142,3169,3170],{},"            str = str .. replacements[char]\n",[142,3172,3173],{"class":144,"line":2943},[142,3174,3175],{},"        else\n",[142,3177,3178],{"class":144,"line":2949},[142,3179,3180],{},"            str = str .. char\n",[142,3182,3183],{"class":144,"line":2955},[142,3184,2952],{},[142,3186,3187],{"class":144,"line":2960},[142,3188,2916],{},[142,3190,3191],{"class":144,"line":2966},[142,3192,3193],{},"    return config.baseSequence .. str\n",[142,3195,3196],{"class":144,"line":2972},[142,3197,2963],{},[142,3199,3200],{"class":144,"line":2978},[142,3201,216],{"emptyLinePlaceholder":57},[142,3203,3204],{"class":144,"line":2983},[142,3205,3206],{},"return M\n",[67,3208,3209],{},"It can then be used like so:",[100,3211,3213],{"className":2765,"code":3212,"language":2767,"meta":108,"style":108},"local mn = require(\"utils\").mapNum\n\nvim.keymap.set(\"n\", mn(\"\u003CC-1>\"), ...)\n-- will not remap F1\nvim.keymap.set(\"n\", mn(\"\u003CC-F1>\"), ...) \n",[82,3214,3215,3220,3224,3229,3234],{"__ignoreMap":108},[142,3216,3217],{"class":144,"line":145},[142,3218,3219],{},"local mn = require(\"utils\").mapNum\n",[142,3221,3222],{"class":144,"line":151},[142,3223,216],{"emptyLinePlaceholder":57},[142,3225,3226],{"class":144,"line":157},[142,3227,3228],{},"vim.keymap.set(\"n\", mn(\"\u003CC-1>\"), ...)\n",[142,3230,3231],{"class":144,"line":163},[142,3232,3233],{},"-- will not remap F1\n",[142,3235,3236],{"class":144,"line":201},[142,3237,3238],{},"vim.keymap.set(\"n\", mn(\"\u003CC-F1>\"), ...)\n",[67,3240,3241],{},"How to get a local module to actually load using lazy.nvim is out of scope for this post, but I might write one on that later because it was not very straightforward.",[394,3243,396],{},{"title":108,"searchDepth":151,"depth":151,"links":3245},[],"2023-07-01T00:00:00.000Z","Some lua functions to make it possible to use Modifier+Number shortcuts (e.g.Ctrl+1) in neovim.","/thumbs/neovim-wezterm-icon.png",[2767],{},{"title":30,"description":3247},[3253,2734],"neovim","ex7oItNe4bbo0isKb8cDzHrg7Onk28zCEFp4zS0I1ME",{"id":3256,"title":34,"body":3257,"date":3983,"description":3984,"extension":402,"image":54,"langs":3985,"meta":3987,"navigation":57,"path":35,"published":57,"seo":3988,"stem":36,"tags":3989,"__hash__":3990},"blog/blog/satisfies.md",{"type":64,"value":3258,"toc":3981},[3259,3272,3275,3278,3281,3670,3676,3682,3753,3759,3766,3844,3865,3877,3963,3966,3972,3975,3978],[67,3260,3261,3262,3265,3266,3271],{},"Typescript's new ",[82,3263,3264],{},"satisfies"," is great for it's ",[71,3267,3270],{"href":3268,"rel":3269},"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html#the-satisfies-operator",[75],"intended use case",", but it's also great for the following use case.",[67,3273,3274],{},"Writing libraries I often run into the following problem:",[67,3276,3277],{},"I want the user to have nice types when using a method, especially in a class, but this often requires complicated types and conditional returns which cannot be handled nicely internally.",[67,3279,3280],{},"Here's a very simple contrived example:",[100,3282,3286],{"className":3283,"code":3284,"language":3285,"meta":108,"style":108},"language-ts shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","type MyType\u003CT> = {value: T}\n\nclass MyClass \u003CT extends MyType\u003Cany>, TCondition extends boolean = false> {\n    public entries: T[] = []\n    public condition: TCondition =false as TCondition\n    constructor(condition:TCondition, entries: T[]) {\n\n    }\n    /** Returns different depending on how the class is instantiated.*/\n    createEntry\u003CTEntry extends MyType\u003Cany>>(val: TEntry): TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>  {\n        // we get the following error for both returns:\n        // Type '{ value: false; }' is not assignable to type 'TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>'.\n        if (this.condition) {\n                return {value: true}\n        } else {\n                return {value: false}\n        }\n    }\n}\n\nconst myClass = new MyClass(true, [])\n\n// res = {value: true}\nconst res = myClass.createEntry({value: \"some val\"})\n","ts",[82,3287,3288,3319,3323,3365,3385,3409,3441,3445,3449,3454,3517,3522,3527,3544,3559,3569,3583,3587,3591,3595,3599,3622,3626,3631],{"__ignoreMap":108},[142,3289,3290,3293,3296,3298,3301,3304,3307,3309,3312,3314,3317],{"class":144,"line":145},[142,3291,3292],{"class":469},"type",[142,3294,3295],{"class":710}," MyType",[142,3297,457],{"class":456},[142,3299,3300],{"class":710},"T",[142,3302,3303],{"class":456},">",[142,3305,3306],{"class":456}," =",[142,3308,813],{"class":456},[142,3310,3311],{"class":460},"value",[142,3313,133],{"class":456},[142,3315,3316],{"class":710}," T",[142,3318,166],{"class":456},[142,3320,3321],{"class":144,"line":151},[142,3322,216],{"emptyLinePlaceholder":57},[142,3324,3325,3327,3330,3333,3335,3338,3340,3342,3345,3348,3351,3353,3356,3358,3361,3363],{"class":144,"line":157},[142,3326,1030],{"class":469},[142,3328,3329],{"class":710}," MyClass",[142,3331,3332],{"class":456}," \u003C",[142,3334,3300],{"class":710},[142,3336,3337],{"class":469}," extends",[142,3339,3295],{"class":710},[142,3341,457],{"class":456},[142,3343,3344],{"class":710},"any",[142,3346,3347],{"class":456},">,",[142,3349,3350],{"class":710}," TCondition",[142,3352,3337],{"class":469},[142,3354,3355],{"class":710}," boolean",[142,3357,3306],{"class":456},[142,3359,3360],{"class":710}," false",[142,3362,3303],{"class":456},[142,3364,714],{"class":456},[142,3366,3367,3370,3373,3375,3377,3380,3382],{"class":144,"line":163},[142,3368,3369],{"class":469},"    public",[142,3371,3372],{"class":460}," entries",[142,3374,133],{"class":456},[142,3376,3316],{"class":710},[142,3378,3379],{"class":485},"[] ",[142,3381,472],{"class":456},[142,3383,3384],{"class":485}," []\n",[142,3386,3387,3389,3392,3394,3396,3398,3402,3406],{"class":144,"line":201},[142,3388,3369],{"class":469},[142,3390,3391],{"class":460}," condition",[142,3393,133],{"class":456},[142,3395,3350],{"class":710},[142,3397,3306],{"class":456},[142,3399,3401],{"class":3400},"sfNiH","false",[142,3403,3405],{"class":3404},"s7zQu"," as",[142,3407,3408],{"class":710}," TCondition\n",[142,3410,3411,3414,3416,3420,3422,3425,3428,3430,3432,3434,3437,3439],{"class":144,"line":207},[142,3412,3413],{"class":469},"    constructor",[142,3415,733],{"class":456},[142,3417,3419],{"class":3418},"sHdIc","condition",[142,3421,133],{"class":456},[142,3423,3424],{"class":710},"TCondition",[142,3426,3427],{"class":456},",",[142,3429,3372],{"class":3418},[142,3431,133],{"class":456},[142,3433,3316],{"class":710},[142,3435,3436],{"class":485},"[]",[142,3438,756],{"class":456},[142,3440,714],{"class":456},[142,3442,3443],{"class":144,"line":213},[142,3444,216],{"emptyLinePlaceholder":57},[142,3446,3447],{"class":144,"line":219},[142,3448,835],{"class":456},[142,3450,3451],{"class":144,"line":225},[142,3452,3453],{"class":450},"    /** Returns different depending on how the class is instantiated.*/\n",[142,3455,3456,3459,3461,3464,3466,3468,3470,3472,3475,3478,3480,3483,3485,3487,3489,3492,3495,3497,3499,3502,3504,3506,3508,3510,3512,3514],{"class":144,"line":230},[142,3457,3458],{"class":460},"    createEntry",[142,3460,457],{"class":456},[142,3462,3463],{"class":710},"TEntry",[142,3465,3337],{"class":469},[142,3467,3295],{"class":710},[142,3469,457],{"class":456},[142,3471,3344],{"class":710},[142,3473,3474],{"class":456},">>(",[142,3476,3477],{"class":3418},"val",[142,3479,133],{"class":456},[142,3481,3482],{"class":710}," TEntry",[142,3484,696],{"class":456},[142,3486,3350],{"class":710},[142,3488,3337],{"class":469},[142,3490,3491],{"class":710}," true",[142,3493,3494],{"class":456}," ?",[142,3496,3295],{"class":710},[142,3498,457],{"class":456},[142,3500,3501],{"class":710},"true",[142,3503,3303],{"class":456},[142,3505,1312],{"class":456},[142,3507,3295],{"class":710},[142,3509,457],{"class":456},[142,3511,3401],{"class":710},[142,3513,3303],{"class":456},[142,3515,3516],{"class":456},"  {\n",[142,3518,3519],{"class":144,"line":236},[142,3520,3521],{"class":450},"        // we get the following error for both returns:\n",[142,3523,3524],{"class":144,"line":241},[142,3525,3526],{"class":450},"        // Type '{ value: false; }' is not assignable to type 'TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>'.\n",[142,3528,3529,3532,3534,3537,3539,3542],{"class":144,"line":247},[142,3530,3531],{"class":3404},"        if",[142,3533,1111],{"class":460},[142,3535,3536],{"class":456},"this.",[142,3538,3419],{"class":485},[142,3540,3541],{"class":460},") ",[142,3543,1114],{"class":456},[142,3545,3546,3549,3551,3553,3555,3557],{"class":144,"line":252},[142,3547,3548],{"class":3404},"                return",[142,3550,813],{"class":456},[142,3552,3311],{"class":460},[142,3554,133],{"class":456},[142,3556,3491],{"class":3400},[142,3558,166],{"class":456},[142,3560,3561,3564,3567],{"class":144,"line":257},[142,3562,3563],{"class":456},"        }",[142,3565,3566],{"class":3404}," else",[142,3568,714],{"class":456},[142,3570,3571,3573,3575,3577,3579,3581],{"class":144,"line":262},[142,3572,3548],{"class":3404},[142,3574,813],{"class":456},[142,3576,3311],{"class":460},[142,3578,133],{"class":456},[142,3580,3360],{"class":3400},[142,3582,166],{"class":456},[142,3584,3585],{"class":144,"line":267},[142,3586,2580],{"class":456},[142,3588,3589],{"class":144,"line":272},[142,3590,835],{"class":456},[142,3592,3593],{"class":144,"line":278},[142,3594,166],{"class":456},[142,3596,3597],{"class":144,"line":384},[142,3598,216],{"emptyLinePlaceholder":57},[142,3600,3601,3603,3606,3608,3611,3613,3615,3617,3619],{"class":144,"line":1341},[142,3602,1092],{"class":469},[142,3604,3605],{"class":485}," myClass ",[142,3607,472],{"class":456},[142,3609,3610],{"class":456}," new",[142,3612,3329],{"class":729},[142,3614,733],{"class":485},[142,3616,3501],{"class":3400},[142,3618,3427],{"class":456},[142,3620,3621],{"class":485}," [])\n",[142,3623,3624],{"class":144,"line":2046},[142,3625,216],{"emptyLinePlaceholder":57},[142,3627,3628],{"class":144,"line":2051},[142,3629,3630],{"class":450},"// res = {value: true}\n",[142,3632,3633,3635,3638,3640,3643,3645,3648,3650,3653,3655,3657,3660,3663,3665,3667],{"class":144,"line":2082},[142,3634,1092],{"class":469},[142,3636,3637],{"class":485}," res ",[142,3639,472],{"class":456},[142,3641,3642],{"class":485}," myClass",[142,3644,89],{"class":456},[142,3646,3647],{"class":729},"createEntry",[142,3649,733],{"class":485},[142,3651,3652],{"class":456},"{",[142,3654,3311],{"class":460},[142,3656,133],{"class":456},[142,3658,3659],{"class":456}," \"",[142,3661,3662],{"class":478},"some val",[142,3664,544],{"class":456},[142,3666,1155],{"class":456},[142,3668,3669],{"class":485},")\n",[67,3671,3672,3673,3675],{},"For the user, the types are correct, but internally for us as developers they are very hard to work with. They can become a mess of cast types, often even as ",[82,3674,3344],{}," if there's a lot of conditional generics magic happening. I've found modifying objects or building objects to add to classes expecially painful.",[67,3677,3678,3679,89],{},"In the example you could cast as the return type but this is not safe if the value we're returning could satisfy either type. It's like, but not exactly like, casting ",[82,3680,3681],{},"as MyType\u003Cboolean>",[100,3683,3685],{"className":3283,"code":3684,"language":3285,"meta":108,"style":108},"if (this.condition) {\n    // no error\n    return {value: false} as TCondition extends true ? MyType\u003Ctrue> : MyType\u003Cfalse>\n}\n",[82,3686,3687,3701,3706,3749],{"__ignoreMap":108},[142,3688,3689,3692,3694,3696,3699],{"class":144,"line":145},[142,3690,3691],{"class":3404},"if",[142,3693,1111],{"class":485},[142,3695,3536],{"class":456},[142,3697,3698],{"class":485},"condition) ",[142,3700,1114],{"class":456},[142,3702,3703],{"class":144,"line":151},[142,3704,3705],{"class":450},"    // no error\n",[142,3707,3708,3711,3713,3715,3717,3719,3721,3723,3725,3727,3729,3731,3733,3735,3737,3739,3741,3743,3745,3747],{"class":144,"line":157},[142,3709,3710],{"class":3404},"    return",[142,3712,813],{"class":456},[142,3714,3311],{"class":460},[142,3716,133],{"class":456},[142,3718,3360],{"class":3400},[142,3720,1155],{"class":456},[142,3722,3405],{"class":3404},[142,3724,3350],{"class":710},[142,3726,3337],{"class":469},[142,3728,3491],{"class":710},[142,3730,3494],{"class":456},[142,3732,3295],{"class":710},[142,3734,457],{"class":456},[142,3736,3501],{"class":710},[142,3738,3303],{"class":456},[142,3740,1312],{"class":456},[142,3742,3295],{"class":710},[142,3744,457],{"class":456},[142,3746,3401],{"class":710},[142,3748,500],{"class":456},[142,3750,3751],{"class":144,"line":163},[142,3752,166],{"class":456},[67,3754,3755,3756,3758],{},"That's where the new ",[82,3757,3264],{}," operator can come in handy.",[67,3760,3761,3762,3765],{},"By itself it won't fix the error. If we do the following, it won't work, the types of the return ",[519,3763,3764],{},"values"," are already correct.",[100,3767,3769],{"className":3283,"code":3768,"language":3285,"meta":108,"style":108},"if (this.condition) {\n    return {value: true} satisfies MyType\u003Ctrue>\n} else {\n    return {value: false} satisfies MyType\u003Cfalse>\n}\n",[82,3770,3771,3783,3808,3816,3840],{"__ignoreMap":108},[142,3772,3773,3775,3777,3779,3781],{"class":144,"line":145},[142,3774,3691],{"class":3404},[142,3776,1111],{"class":485},[142,3778,3536],{"class":456},[142,3780,3698],{"class":485},[142,3782,1114],{"class":456},[142,3784,3785,3787,3789,3791,3793,3795,3797,3800,3802,3804,3806],{"class":144,"line":151},[142,3786,3710],{"class":3404},[142,3788,813],{"class":456},[142,3790,3311],{"class":460},[142,3792,133],{"class":456},[142,3794,3491],{"class":3400},[142,3796,1155],{"class":456},[142,3798,3799],{"class":3404}," satisfies",[142,3801,3295],{"class":710},[142,3803,457],{"class":456},[142,3805,3501],{"class":710},[142,3807,500],{"class":456},[142,3809,3810,3812,3814],{"class":144,"line":157},[142,3811,1155],{"class":456},[142,3813,3566],{"class":3404},[142,3815,714],{"class":456},[142,3817,3818,3820,3822,3824,3826,3828,3830,3832,3834,3836,3838],{"class":144,"line":163},[142,3819,3710],{"class":3404},[142,3821,813],{"class":456},[142,3823,3311],{"class":460},[142,3825,133],{"class":456},[142,3827,3360],{"class":3400},[142,3829,1155],{"class":456},[142,3831,3799],{"class":3404},[142,3833,3295],{"class":710},[142,3835,457],{"class":456},[142,3837,3401],{"class":710},[142,3839,500],{"class":456},[142,3841,3842],{"class":144,"line":201},[142,3843,166],{"class":456},[67,3845,3846,3847,3850,3851,3854,3855,2162,3860,658],{},"This is because the real problem is typescript doesn't narrow the type of the ",[519,3848,3849],{},"return type"," based on ",[82,3852,3853],{},"this.condition"," (see ",[71,3856,3859],{"href":3857,"rel":3858},"https://github.com/microsoft/TypeScript/issues/24929",[75],"#24929",[71,3861,3864],{"href":3862,"rel":3863},"https://github.com/microsoft/TypeScript/issues/33014",[75],"#33014",[67,3866,3867,3868,3870,3871,3874,3875,133],{},"But we can use ",[82,3869,3264],{}," to keep the expected type safety ",[519,3872,3873],{},"while"," casting as ",[82,3876,3344],{},[100,3878,3880],{"className":3283,"code":3879,"language":3285,"meta":108,"style":108},"if (this.condition) {\n    return {value: true} satisfies MyType\u003Ctrue> as any\n} else {\n    return {value: false} satisfies MyType\u003Cfalse> as any\n}\n",[82,3881,3882,3894,3923,3931,3959],{"__ignoreMap":108},[142,3883,3884,3886,3888,3890,3892],{"class":144,"line":145},[142,3885,3691],{"class":3404},[142,3887,1111],{"class":485},[142,3889,3536],{"class":456},[142,3891,3698],{"class":485},[142,3893,1114],{"class":456},[142,3895,3896,3898,3900,3902,3904,3906,3908,3910,3912,3914,3916,3918,3920],{"class":144,"line":151},[142,3897,3710],{"class":3404},[142,3899,813],{"class":456},[142,3901,3311],{"class":460},[142,3903,133],{"class":456},[142,3905,3491],{"class":3400},[142,3907,1155],{"class":456},[142,3909,3799],{"class":3404},[142,3911,3295],{"class":710},[142,3913,457],{"class":456},[142,3915,3501],{"class":710},[142,3917,3303],{"class":456},[142,3919,3405],{"class":3404},[142,3921,3922],{"class":710}," any\n",[142,3924,3925,3927,3929],{"class":144,"line":157},[142,3926,1155],{"class":456},[142,3928,3566],{"class":3404},[142,3930,714],{"class":456},[142,3932,3933,3935,3937,3939,3941,3943,3945,3947,3949,3951,3953,3955,3957],{"class":144,"line":163},[142,3934,3710],{"class":3404},[142,3936,813],{"class":456},[142,3938,3311],{"class":460},[142,3940,133],{"class":456},[142,3942,3360],{"class":3400},[142,3944,1155],{"class":456},[142,3946,3799],{"class":3404},[142,3948,3295],{"class":710},[142,3950,457],{"class":456},[142,3952,3401],{"class":710},[142,3954,3303],{"class":456},[142,3956,3405],{"class":3404},[142,3958,3922],{"class":710},[142,3960,3961],{"class":144,"line":201},[142,3962,166],{"class":456},[67,3964,3965],{},"This prevents us from not satisfying the type we expect before casting.",[100,3967,3970],{"className":3968,"code":3969,"language":105},[103],"// Type 'false' is not assignable to type 'true'.\nreturn {value: false} satisfies MyType\u003Ctrue> as any\n",[82,3971,3969],{"__ignoreMap":108},[67,3973,3974],{},"It can be very useful for keeping a more relaxed level of type safety inside very strictly typed classes.",[67,3976,3977],{},"The only error prone thing about doing this is that you do have to know what type you're expecting, but this is a lot safer than no safety at all.",[394,3979,3980],{},"html pre.shiki code .spNyl, html code.shiki .spNyl{--shiki-light:#9C3EDA;--shiki-default:#C792EA;--shiki-dark:#C792EA}html pre.shiki code .sBMFI, html code.shiki .sBMFI{--shiki-light:#E2931D;--shiki-default:#FFCB6B;--shiki-dark:#FFCB6B}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sHdIc, html code.shiki .sHdIc{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#EEFFFF;--shiki-default-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}",{"title":108,"searchDepth":151,"depth":151,"links":3982},[],"2022-10-10T00:00:00.000Z","Typescript's new satisfies is great for it's intended use case, but it's also great for the following use case.",[3986],"typescript",{},{"title":34,"description":3984},[615],"qlEDq0ykdmDR4G2eYqmzDbmwIoU55p2r0l7Z9m3xnMI",{"id":3992,"title":26,"body":3993,"date":4098,"description":4099,"extension":402,"image":4100,"langs":4101,"meta":4103,"navigation":57,"path":27,"published":57,"seo":4105,"stem":28,"tags":4106,"__hash__":4109},"blog/blog/krita-brush-pr.md",{"type":64,"value":3994,"toc":4096},[3995,3998,4001,4004,4011,4020,4023,4026,4029,4032,4041,4050,4053,4056,4059,4062,4065,4073,4076,4079,4082,4088],[67,3996,3997],{},"I switched to Krita from Photoshop a while back now. Photoshop has not really improved it's painting experience in any wayfor a long time and it's had some long standing brush engine related bugs that annoy me to no end.",[67,3999,4000],{},"Krita on the other hand was a little bit rough around the edges, but has some of the best brush engines around (yes, multiple engines), and it's constantly being improved. Plus, it's open source. If something bothers me, I can try to fix it.",[67,4002,4003],{},"One of the little things that did bother me is Krita's popup palette. It had too much going on in my opinion, with no way to disable some parts of it. The number of brush slots had to be pre set in the configuration and they did not use the optimal space. There were also some minor bugs.",[67,4005,4006,4007,89],{},"I went into this knowing zero C++, never having really built a program like this. It was quite the learning experience, but I finally got everything I wanted fixed and merged! You can find more details about the PR ",[71,4008,2513],{"href":4009,"rel":4010},"https://invent.kde.org/graphics/krita/-/merge_requests/922",[75],[67,4012,4013,4014,4019],{},"Krita has some good build docs, but I'm on windows and between that and all this being new to me, there were a lot of little gotchas. I documented them all and ended up writing myself some simple build scripts to simplify everything. I published these along with my VSCode setup and all my notes on ",[71,4015,4018],{"href":4016,"rel":4017},"https://github.com/AlansCodeLog/krita-build-vscode-config",[75],"github",". Hope it might help others in a similar situation.",[67,4021,4022],{},"Anyways I initially started with the simple stuff. The small bug fixes to get familiar with the code base. It's huge so it helps to focus on some small area. Now this might seem obvious, but I know to my beginner self it was not. My go to strategy for finding something in such a large code base is to search for some text at/near what I want to change and go from there. I do not really try to understand the organization of the project. Enough will emerge from looking at related files to understand what I need. Usually it is not more than a couple of files that you'll need to look at to change something.",[67,4024,4025],{},"When in doubt there was also the very helpful Krita dev IRC chat to point me in the right direction.",[67,4027,4028],{},"The C++ was not as scary as I thought it would be. It's not like you have to deal with pointers or memory management that much at all. You just have to get used to the syntax and using header files and that's about it. The key really is to have your editor setup properly so you have autocomplete. There's a note on how to do that in the readme of the scripts I published.",[67,4030,4031],{},"Krita is built Qt so it also helped have the Qt docs open at all times.",[67,4033,4034,4035,4040],{},"As I made small fixes, I used ",[71,4036,4039],{"href":4037,"rel":4038},"https://stacked-git.github.io/",[75],"stacked git"," to commit them. I might make a blog post about it later, but it's great for exploratory stuff like this. It makes it super easy to push different changes to different commits, and then later re-order them before submitting a PR. Or temporarily hide some commits for debugging or because they didn't work out.",[67,4042,4043,4044,4049],{},"I also kept multiple ",[71,4045,4048],{"href":4046,"rel":4047},"https://git-scm.com/docs/git-worktree",[75],"git worktrees"," for different branches. Git worktrees if you've never used them, allow you to checkout a branch in a different folder. So I could have many separate branches and builds. I had one for my branch, one for the the master branch, and a third one just for checking out/navigating commits. This is because switching branches will trigger a complete rebuild and that would take 2-3 hours. So worktrees were a must. I could also setup multiple builds like this.",[67,4051,4052],{},"Next I moved on to the more difficult issue I wanted to tackle, the algorithm that laid out the popup palette brush slots. Making it support a dynamic slot count was easy as the widget could already support them, it was just a matter of allowing it in the config and getting the count of brushes for the chosen tag.",[67,4054,4055],{},"What I really wanted to change was the way the slots were drawn, since they were often too small depending on the count and the ring diameters chosen.",[67,4057,4058],{},"Qt widgets have a paintEvent method where one can draw arbitrary lines and shapes. This is how the majority of the popup palette is drawn. I found it similar to drawing on an html canvas which I already had some experience with..",[67,4060,4061],{},"Here I started to just change the colors of the drawn parts and commment/uncomment code until I understood it more, adding my own comments if needed. Once I understood everything I commented out any code not related to the brush slots I wanted to change and started playing with the algorithm which was in a separate area, drawing measurements to the screen if I didn't understand them.",[67,4063,4064],{},"Some demon summoning later and with a similar procress I understood the original algorithm which relied on a couple of loops to try to find the optimal number of rows we could have.",[67,4066,4067],{},[4068,4069],"img",{"alt":4070,"src":4071,"style":4072},"Slots drawn on top of the krita palette.","/thumbs/krita-demon-summoning.png","margin:auto;width:100%;max-width:300px;",[67,4074,4075],{},"I tried to find a geometric approach to calculating the size of the slot circles, but the problem is if we want to allow user control of the diameter of the outer ring, the slots cannot have the same size on every row. We end up limited by how many fit in the inner row.",[67,4077,4078],{},"So I expanded on the original algorithm, adding several checks to shrink/enlarge the slots depending on the situation. These checks are not recursive or complicated in that sence, so while the algorithm is a lot more complex, it still happens in \"steps\", and you can comment out a part and see that it just no longer optimizes the slot sizes in that situation.",[67,4080,4081],{},"Here is the before/after with the rings at various sizes.",[67,4083,4084],{},[4085,4086],"video",{"src":4087,"controls":57},"/posts/krita-palette-before-after.mp4",[67,4089,4090,4091,658],{},"Anyways, this and a few other goodies I added should be out properly in Krita 5.1, otherwise you can try nightly Next builds (they're in the bottom half of the ",[71,4092,4095],{"href":4093,"rel":4094},"https://krita.org/en/download/krita-desktop/",[75],"download page",{"title":108,"searchDepth":151,"depth":151,"links":4097},[],"2021-08-01T00:00:00.000Z","From zero C++ to getting a PR merged into Krita.","thumbs/krita-demon-summoning.png",[4102],"c++",{"coverAlt":4104},"Debug lines drawn on top of the krita palette.",{"title":26,"description":4099},[4107,4108],"krita","graphics","RtnoxQhbsQXRu-mFTXRbwTVYrO9Upws-JVmLD5aqErU",{"id":4111,"title":18,"body":4112,"date":4144,"description":4145,"extension":402,"image":4146,"langs":4147,"meta":4149,"navigation":57,"path":19,"published":57,"seo":4150,"stem":20,"tags":4151,"__hash__":4154},"blog/blog/blender-debugger.md",{"type":64,"value":4113,"toc":4142},[4114,4123,4131,4134],[67,4115,4116,4117,4122],{},"I've written a small ",[71,4118,4121],{"href":4119,"rel":4120},"https://github.com/alanscodelog/blender-debugger-for-vscode",[75]," Blender plugin "," to help remote debug Blender plugins. Now that's a mouthful.",[67,4124,4125,4126,4130],{},"This allows the setting of breakpoints in your editor, and stepping through the code. It was mainly written to be compatible with VSCode, hence the name. But some other editors also support connecting to ",[4127,4128,4129],"del",{},"ptvsd"," (edit: it has been changed to use debugpy now).",[67,4132,4133],{},"import { YouTube } from \"@astro-community/astro-embed-youtube\";",[4135,4136,4139],"you-tube",{"id":4137,"poster":4138},"UVDf2VSmRvk","https://i.ytimg.com/vi/UVDf2VSmRvk/maxresdefault.jpg",[67,4140,4141],{},"Full documentation is available on github, but I've also made a video over on my art youtube channel, showing how to set it up and use itfor beginners.",{"title":108,"searchDepth":151,"depth":151,"links":4143},[],"2018-02-23T00:00:00.000Z","A small Blender plugin to help remote debug Blender plugins. ","/thumbs/blender-debugger-cover.jpg",[4148],"python",{},{"title":18,"description":4145},[4152,4153],"3d","blender","3JsASjQ5_4OlJLxF1_QvabOAD3XU2lfvp7a1d__-_QU",1758977026982]